//Below code is the logic and drawing for all 2D elements during main gameplay.


/*virtual*/ void CGameplayState::RenderSprites(CRenderer * Renderer)
{
	D3D11_VIEWPORT* pmViewPort = Renderer->GetViewPort(EViewport::Fullscreen);

	if (pmViewPort != nullptr)
	{

		//D3D11_VIEWPORT mViewPort;
		//UINT numViews = 1;
		//Renderer->GetDeviceContextPointer()->RSGetViewports(&numViews, &mViewPort);
		//
		//if (numViews >= 1)
		//{
		/*******************************************************BEGIN FULL SCREEN**********************************************************/

		Renderer->GetDeviceContextPointer()->RSSetViewports(1, (Renderer->GetViewPort(EViewport::Fullscreen)));

		//TRANSITION
		if (m_fTimer > 0.0f || m_fCutsceneTransitionTimer > 0.0f)
		{
			ID3D11ShaderResourceView* ShaderResource = nullptr;

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(TRANSITION);

			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
			destRect.top = 0;
			destRect.left = 0;
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(0, 0, 0, m_fTimer > 0.0f ? m_fTimer : m_fCutsceneTransitionTimer)));

			m_pSpriteBatch->End();
		}

		if ((m_fCutScene2DTimer > 0.0f && pcObjMan->GetCutsceneBool()) || (m_fCutSceneOther2DTimer > 0.0f && pcObjMan->GetCutsceneBool()))
			RenderCutscene2D();

		if (!pcObjMan->GetCutsceneBool())
		{

			//TIMER
			std::wstringstream time_stream;
			time_stream << (int(m_Spawn.GetTimer()) / 60 > 0 ? int(m_Spawn.GetTimer()) / 60 : 0) << ":" << (int(m_Spawn.GetTimer()) % 60 < 10 ? "0" : "") << int(m_Spawn.GetTimer()) % 60;
			std::wstring time(time_stream.str());

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, time.c_str(), XMFLOAT2(940.0f, 520.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();

			//FRAMES COUNTER
			if (GameForgeInput::GetInstance()->GetFrames())
			{
				m_pSpriteBatch->Begin();
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"DEBUG INFO:", XMFLOAT2(10.0f, 60.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
				m_pSpriteBatch->End();

				std::wstringstream fps_stream;
				fps_stream << "FPS: " << m_fFPS;
				std::wstring fps(fps_stream.str());

				m_pSpriteBatch->Begin();
				m_pFontCalibri->DrawString(m_pSpriteBatch, fps.c_str(), XMFLOAT2(10.0f, 85.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.5f, 1.0f)));
				m_pSpriteBatch->End();

				std::wstringstream god_stream;
				god_stream << "God Mode: " << (GameForgeInput::GetInstance()->GetGodMode() == true ? "On" : "Off");
				std::wstring god(god_stream.str());

				m_pSpriteBatch->Begin();
				m_pFontCalibri->DrawString(m_pSpriteBatch, god.c_str(), XMFLOAT2(10.0f, 110.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f)));
				m_pSpriteBatch->End();

				std::wstringstream time_stream;
				time_stream << "Game Time: " << (int(m_Spawn.GetTimer()) / 60 > 0 ? int(m_Spawn.GetTimer()) / 60 : 0) << ":" << (int(m_Spawn.GetTimer()) % 60 < 10 ? "0" : "") << int(m_Spawn.GetTimer()) % 60;
				std::wstring time(time_stream.str());

				m_pSpriteBatch->Begin();
				m_pFontCalibri->DrawString(m_pSpriteBatch, time.c_str(), XMFLOAT2(10.0f, 135.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 1.0f, 1.0f, 1.0f)));
				m_pSpriteBatch->End();

				std::wstringstream single_stream;
				single_stream << "Single Player: " << (GameForgeInput::GetInstance()->GetIsSinglePlayer() == true ? "On" : "Off");
				std::wstring single(single_stream.str());

				m_pSpriteBatch->Begin();
				m_pFontCalibri->DrawString(m_pSpriteBatch, single.c_str(), XMFLOAT2(10.0f, 160.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)));
				m_pSpriteBatch->End();
			}


			/*********************************************************END FULL SCREEN**********************************************************/


			/*************************************************BEGIN PLAYER ONE SCREEN**********************************************************/

			//SET TO TOP SCREEN
			Renderer->GetDeviceContextPointer()->RSSetViewports(1, (Renderer->GetViewPort(EViewport::Top)));

			//GENERAL HUD INTERFACE
			RenderStatsHUD(pcPlayer1);

			if (!gameOver)
			{
				//POPUP STUFF
				RenderPopUps(pcPlayer1, EViewport::Top, GameForgeInput::GetInstance()->GetNumberOfControllers() > 1 ? true : false);

				//LAUNCHER INTERFACE
				if (pcPlayer1->GetShowHud() == true)
					RenderLauncherHUD(pcPlayer1);

				//WALL INTERFACE
				if (pcPlayer1->GetShowWallHUD() == true)
					RenderWallHUD(pcPlayer1);

				//UPGRADE TABLE
				if (pcPlayer1->GetUpgradeHUD() == true)
					RenderUpgradeHUD(pcPlayer1);

				//READYUP
				if (m_bPseudoStartGame == false)
					RenderPseudoReadyState(pcPlayer1);

				//SHOW TUTORIAL INTRO SCREEN
				if (m_bP1ExitTutorialScreen == false)
				{
					RECT Rect;
					Rect.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height);
					Rect.top = LONG(0);
					Rect.left = LONG(0);
					Rect.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width);

					m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

					ID3D11ShaderResourceView * ShaderResource = Renderer->GetTexture(TUTORIAL_INTRO_SCREEN_UI);
					m_pSpriteBatch->Draw(ShaderResource, Rect);

					m_pSpriteBatch->End();
				}
			}
			else
				//DEATH WIN/LOSE GRAPHIC & STATS
				RenderDeathInfo(pcPlayer1, m_fP1SlideInStats);

			/***************************************************END PLAYER ONE SCREEN**********************************************************/


			/*************************************************BEGIN PLAYER TWO SCREEN**********************************************************/

			//SET TO BOTTOM SCREEN
			Renderer->GetDeviceContextPointer()->RSSetViewports(1, (Renderer->GetViewPort(EViewport::Bottom)));

			//GENERAL HUD INTERFACE
			RenderStatsHUD(pcPlayer2);

			if (!gameOver)
			{
				//POPUP STUFF
				RenderPopUps(pcPlayer2, EViewport::Bottom, GameForgeInput::GetInstance()->GetNumberOfControllers() >= 1 ? true : false);

				//LAUNCHER INTERFACE
				if (pcPlayer2->GetShowHud() == true)
					RenderLauncherHUD(pcPlayer2);

				//WALL INTERFACE
				if (pcPlayer2->GetShowWallHUD() == true)
					RenderWallHUD(pcPlayer2);

				//UPGRADE TABLE
				if (pcPlayer2->GetUpgradeHUD() == true)
					RenderUpgradeHUD(pcPlayer2);

				//READYUP
				if (m_bPseudoStartGame == false)
					RenderPseudoReadyState(pcPlayer2);

				//SHOW TUTORIAL INTRO SCREEN
				if (m_bP2ExitTutorialScreen == false)
				{
					RECT Rect;
					Rect.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height);
					Rect.top = 0;
					Rect.left = 0;
					Rect.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width);

					m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

					ID3D11ShaderResourceView * ShaderResource = Renderer->GetTexture(TUTORIAL_INTRO_SCREEN_UI);
					m_pSpriteBatch->Draw(ShaderResource, Rect);

					m_pSpriteBatch->End();
				}
			}
			else
				//DEATH WIN/LOSE GRAPHIC & STATS
				RenderDeathInfo(pcPlayer2, m_fP2SlideInStats);

			/***************************************************END PLAYER TWO SCREEN**********************************************************/

		}
	}

	//Super Important! Spritebatches manipulate the blend and depth stencil states. This resets them to avoid issues.
	ResetBlendAndDepthStencilStates();
}

void CGameplayState::RenderPseudoReadyState(CPlayer * pPlayer)
{
	if (pPlayer->GetPlayer1())
	{
		ID3D11ShaderResourceView * ShaderResource = nullptr;

		ShaderResource = (m_bPseudoP1ReadyButton == true ? Renderer->GetTexture(READY_BUTTON_INGAME) : Renderer->GetTexture(NOT_READY_BUTTON_INGAME));

		RECT Rect;
		Rect.top = 440;
		Rect.left = 25;
		Rect.bottom = LONG(Rect.top + 75.0f);
		Rect.right = LONG(Rect.left + 250.f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());
		m_pSpriteBatch->Draw(ShaderResource, Rect);
		m_pSpriteBatch->End();

		if (GameForgeInput::GetInstance()->GetNumberOfControllers() > 1)
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"PRESS BACK TO READY ", XMFLOAT2(10.0f, 400.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"PRESS ENTER TO READY ", XMFLOAT2(10.0f, 400.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
	}
	else
	{
		ID3D11ShaderResourceView * ShaderResource = nullptr;

		ShaderResource = (m_bPseudoP2ReadyButton == true ? Renderer->GetTexture(READY_BUTTON_INGAME) : Renderer->GetTexture(NOT_READY_BUTTON_INGAME));

		RECT Rect;
		Rect.top = 25;
		Rect.left = 25;
		Rect.bottom = LONG(Rect.top + 75.0f);
		Rect.right = LONG(Rect.left + 250.f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());
		m_pSpriteBatch->Draw(ShaderResource, Rect);
		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"PRESS BACK TO READY ", XMFLOAT2(10.0f, float(Rect.bottom) + 5.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();
	}

	if (m_bPseudoReadyState == false)
	{
		ID3D11ShaderResourceView * ShaderResource = nullptr;

		ShaderResource = Renderer->GetTexture(NOT_READY_BUTTON_INGAME);

		RECT Rect;
		Rect.top = 245;
		Rect.left = 935;
		Rect.bottom = 305;
		Rect.right = 995;

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());
		m_pSpriteBatch->Draw(ShaderResource, Rect, nullptr, XMLoadFloat4(&XMFLOAT4(123123123123.0f, 123123123.0f, 123123123.0f, 123123123123.0f)));
		m_pSpriteBatch->End();

		if (m_fPseudoReadyTimer < 0.0f)
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"GO", XMFLOAT2(940.0f, 260.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.5f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else if (m_fPseudoReadyTimer < 1.0f)
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"1", XMFLOAT2(950.0f, 260.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.5f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else if (m_fPseudoReadyTimer < 2.0f)
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"2", XMFLOAT2(950.0f, 260.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.5f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else if (m_fPseudoReadyTimer < 3.0f)
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"3", XMFLOAT2(950.0f, 260.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.5f, 1.0f)));
			m_pSpriteBatch->End();
		}
	}

	m_pSpriteBatch->Begin();
	m_pFontCalibri->DrawString(m_pSpriteBatch, L"-Try collecting potatoes", XMFLOAT2(1450.0f, 10.0f), pPlayer->m_bHasHadAPotato == true ? XMLoadFloat4(&XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f)) : XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
	m_pFontCalibri->DrawString(m_pSpriteBatch, L"-Try fortifying your building", XMFLOAT2(1450.0f, 40.0f), pPlayer->m_bHasFortified == true ? XMLoadFloat4(&XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f)) : XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
	m_pFontCalibri->DrawString(m_pSpriteBatch, L"-Try launching pranks", XMFLOAT2(1450.0f, 70.0f), pPlayer->m_bHasLaunched == true ? XMLoadFloat4(&XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f)) : XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
	m_pFontCalibri->DrawString(m_pSpriteBatch, L"-Try to upgrade things", XMFLOAT2(1450.0f, 100.0f), pPlayer->m_bHasUpgraded == true ? XMLoadFloat4(&XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f)) : XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
	m_pFontCalibri->DrawString(m_pSpriteBatch, L"-Try to use emergency button", XMFLOAT2(1450.0f, 130.0f), pPlayer->m_bHasEmergencied == true ? XMLoadFloat4(&XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f)) : XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
	m_pSpriteBatch->End();
}

void CGameplayState::RenderPopUps(CPlayer* pPlayer, EViewport eViewPort, bool bIsControllerControlled)
{
	float offsetX = 130.0f;
	float offsetY = 30.0f;

	//Interactible Pop up stuff
	if (pPlayer->GetIsInteractible()->m_nIsInteracting == 1)
	{
		m_pSpriteBatch->Begin();

		if (pPlayer->GetShowHud() == false)
		{
			if (bIsControllerControlled == false)
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"Press 'E' to Fortify!", XMFLOAT2((pcObjMan->Renderer->GetViewPort(eViewPort)->Width / 2) - offsetX,
				(pcObjMan->Renderer->GetViewPort(eViewPort)->Height / 2) + offsetY), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.5f, 1.0f)));
			else
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"Press 'A' to Fortify!", XMFLOAT2((pcObjMan->Renderer->GetViewPort(eViewPort)->Width / 2) - offsetX,
				(pcObjMan->Renderer->GetViewPort(eViewPort)->Height / 2) + offsetY), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.5f, 1.0f)));

			if (m_bPseudoReadyState)
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"Ready Up to Leave Room!", XMFLOAT2((pcObjMan->Renderer->GetViewPort(eViewPort)->Width / 2) - offsetX - 25.0f,
				(pcObjMan->Renderer->GetViewPort(eViewPort)->Height / 2) + offsetY - 100.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.5f, 0.5f, 1.0f)));

		}
		m_pSpriteBatch->End();
	}
	else if (pPlayer->GetIsInteractible()->m_nIsInteracting == 2)
	{
		m_pSpriteBatch->Begin();

		if (pPlayer->GetShowWallHUD() == false)
		{
			if (bIsControllerControlled == false)
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"Press 'E' to Launch!", XMFLOAT2((pcObjMan->Renderer->GetViewPort(eViewPort)->Width / 2) - offsetX,
				(pcObjMan->Renderer->GetViewPort(eViewPort)->Height / 2) + offsetY), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.5f, 1.0f)));
			else
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"Press 'A' to Launch!", XMFLOAT2((pcObjMan->Renderer->GetViewPort(eViewPort)->Width / 2) - offsetX,
				(pcObjMan->Renderer->GetViewPort(eViewPort)->Height / 2) + offsetY), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.5f, 1.0f)));

		}
		m_pSpriteBatch->End();
	}
	else if (pPlayer->GetIsInteractible()->m_nIsInteracting == 4) // Emergency Button
	{
		m_pSpriteBatch->Begin();

		if (bIsControllerControlled == false)
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"Press 'E' to use Emergency Button!", XMFLOAT2((pcObjMan->Renderer->GetViewPort(eViewPort)->Width / 2) - offsetX,
			(pcObjMan->Renderer->GetViewPort(eViewPort)->Height / 2) + offsetY), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.5f, 1.0f)));
		else
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"Press 'A' to use Emergency Button!", XMFLOAT2((pcObjMan->Renderer->GetViewPort(eViewPort)->Width / 2) - offsetX,
			(pcObjMan->Renderer->GetViewPort(eViewPort)->Height / 2) + offsetY), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.5f, 1.0f)));

		m_pSpriteBatch->End();
	}
}

void CGameplayState::RenderLauncherHUD(CPlayer* pPlayer)
{
	CResourceManager * pResMan = pPlayer->GetResourceManager();

	float m_fUpgradeRot;

	if (pPlayer->GetPlayer1())
		m_fUpgradeRot = m_fP1RecipeRot;
	else
		m_fUpgradeRot = m_fP2RecipeRot;

	ID3D11ShaderResourceView * ShaderResource = nullptr;

	RECT destRectFill;
	destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 512.0f);
	destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 0.0f);
	destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 0.0f);
	destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 512.0f);

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	ShaderResource = Renderer->GetTexture(RADIAL_OFFENSE_UI);
	m_pSpriteBatch->Draw(ShaderResource, destRectFill, nullptr, Colors::White, 0.0f,
		XMFLOAT2(256.0f, 256.0f/*Renderer->GetViewPort(EViewport::Top)->Width * 0.5f,
							   Renderer->GetViewPort(EViewport::Top)->Height * 0.5f*/));
	m_pSpriteBatch->End();

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	ShaderResource = Renderer->GetTexture(PIZZA_SELECTOR_UI);
	m_pSpriteBatch->Draw(ShaderResource, destRectFill, nullptr, Colors::White, m_fUpgradeRot, XMFLOAT2(256.0f, 256.0f/*Renderer->GetViewPort(EViewport::Top)->Width * 0.5f, Renderer->GetViewPort(EViewport::Top)->Height * 0.5f*/));

	m_pSpriteBatch->End();

	destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
	destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
	destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
	destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

	if (pPlayer->GetHudItem() < 3)
	{
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		RECT tinyRect;
		tinyRect.top = LONG(destRectFill.top + 320.0f);
		tinyRect.left = LONG(destRectFill.left + 175.0f);
		tinyRect.bottom = LONG(tinyRect.top + 40.0f);
		tinyRect.right = LONG(tinyRect.left + 40.0f);
		ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, tinyRect);

		m_pSpriteBatch->End();
	}

	switch (pPlayer->GetHudItem())
	{
	case 0:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 3;

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"EMP", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"Turns lights", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"off leaving", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"only flashlight", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 250.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		std::wstringstream potato_stream;
		potato_stream << "Cost: " << pResMan->m_nPrankCost[ItemEnum::EMP][pResMan->GetUpgradeNum(ItemEnum::EMP)];
		std::wstring potato(potato_stream.str());

		if (pPlayer->GetResourceManager()->GetPotatoCount() >= pResMan->m_nPrankCost[ItemEnum::EMP][pResMan->GetUpgradeNum(ItemEnum::EMP)])
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			int m_nRemainder = pResMan->m_nPrankCost[ItemEnum::EMP][pResMan->GetUpgradeNum(ItemEnum::EMP)] - pPlayer->GetResourceManager()->GetPotatoCount();
			std::wstringstream stream;
			stream << "Get " << m_nRemainder << " more ";
			std::wstring string(stream.str());

			RECT destRect;
			destRect.left = LONG(destRectFill.left + 160.0f);
			destRect.top = LONG(destRectFill.top + 285.0f);
			destRect.bottom = LONG(destRect.top + 30.0f);
			destRect.right = LONG(destRect.left + 195.0f);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(HEALTHBAR);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(123123.0f, 12313.0f, 123123.0f, 123123.0f)));

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			RECT Rect;
			Rect.top = LONG(destRectFill.top + 285.0f);
			Rect.left = LONG(destRectFill.left + 315.0f);
			Rect.bottom = LONG(Rect.top + 40.0f);
			Rect.right = LONG(Rect.left + 40.0f);
			ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
			m_pSpriteBatch->Draw(ShaderResource, Rect);

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 160.0f, float(destRectFill.top) + 280.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, m_fP1CraftCraftedTimer)));
			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}

		break;
	}
	case 1:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 4;

		std::wstringstream potato_stream;
		potato_stream << "Cost: " << pResMan->m_nPrankCost[ItemEnum::BOOMBOX][pResMan->GetUpgradeNum(ItemEnum::BOOMBOX)];
		std::wstring potato(potato_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"BOOMBOX", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"Spawn boombox", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"that sends", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"zombies", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 250.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

		m_pSpriteBatch->End();

		if (pPlayer->GetResourceManager()->GetPotatoCount() >= pResMan->m_nPrankCost[ItemEnum::BOOMBOX][pResMan->GetUpgradeNum(ItemEnum::BOOMBOX)])
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			int m_nRemainder = pResMan->m_nPrankCost[ItemEnum::BOOMBOX][pResMan->GetUpgradeNum(ItemEnum::BOOMBOX)] - pPlayer->GetResourceManager()->GetPotatoCount();
			std::wstringstream stream;
			stream << "Get " << m_nRemainder << " more ";
			std::wstring string(stream.str());

			RECT destRect;
			destRect.left = LONG(destRectFill.left + 160.0f);
			destRect.top = LONG(destRectFill.top + 285.0f);
			destRect.bottom = LONG(destRect.top + 30.0f);
			destRect.right = LONG(destRect.left + 195.0f);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(HEALTHBAR);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(123123.0f, 12313.0f, 123123.0f, 123123.0f)));

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			RECT Rect;
			Rect.top = LONG(destRectFill.top + 285.0f);
			Rect.left = LONG(destRectFill.left + 325.0f);
			Rect.bottom = LONG(Rect.top + 40.0f);
			Rect.right = LONG(Rect.left + 40.0f);
			ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
			m_pSpriteBatch->Draw(ShaderResource, Rect);

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 155.0f, float(destRectFill.top) + 280.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, m_fP1CraftCraftedTimer)));
			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}

		break;
	}
	case 2:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 1;

		std::wstringstream potato_stream;
		potato_stream << "Cost: " << pResMan->m_nPrankCost[ItemEnum::FLASHBANG][pResMan->GetUpgradeNum(ItemEnum::FLASHBANG)];
		std::wstring potato(potato_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"FLASH BANG", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"Inverts controls", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"and flashes", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"screen whtie", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 250.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		if (pPlayer->GetResourceManager()->GetPotatoCount() >= pResMan->m_nPrankCost[ItemEnum::FLASHBANG][pResMan->GetUpgradeNum(ItemEnum::FLASHBANG)])
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			int m_nRemainder = pResMan->m_nPrankCost[ItemEnum::FLASHBANG][pResMan->GetUpgradeNum(ItemEnum::FLASHBANG)] - pPlayer->GetResourceManager()->GetPotatoCount();
			std::wstringstream stream;
			stream << "Get " << m_nRemainder << " more ";
			std::wstring string(stream.str());

			RECT destRect;
			destRect.left = LONG(destRectFill.left + 160.0f);
			destRect.top = LONG(destRectFill.top + 285.0f);
			destRect.bottom = LONG(destRect.top + 30.0f);
			destRect.right = LONG(destRect.left + 195.0f);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(HEALTHBAR);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(123123.0f, 12313.0f, 123123.0f, 123123.0f)));

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			RECT Rect;
			Rect.top = LONG(destRectFill.top + 285.0f);
			Rect.left = LONG(destRectFill.left + 315.0f);
			Rect.bottom = LONG(Rect.top + 40.0f);
			Rect.right = LONG(Rect.left + 40.0f);
			ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
			m_pSpriteBatch->Draw(ShaderResource, Rect);

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 160.0f, float(destRectFill.top) + 280.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, m_fP1CraftCraftedTimer)));
			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}

		break;
	}

	case 3:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 2;

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"RETURN TO GAME", XMFLOAT2(float(destRectFill.left) + 125.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		break;
	}
	default:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 1;

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(FLASH_BANG_INFO_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 275.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
		break;
	}
	}

	if (pPlayer->GetEMPCoolDown() > 0.0f)
	{
		std::wstringstream timer;
		timer << (int(pPlayer->GetEMPCoolDown()) / 60 > 0 ? int(pPlayer->GetEMPCoolDown()) / 60 : 0) << ":" << (int(pPlayer->GetEMPCoolDown()) % 60 < 10 ? "0" : "") << int(pPlayer->GetEMPCoolDown()) % 60;
		std::wstring time(timer.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, time.c_str(), XMFLOAT2(float(destRectFill.left) + 35.0f, float(destRectFill.top) + 240.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
	}

	if (pPlayer->GetBoomBoxCoolDown() > 0.0f)
	{
		std::wstringstream timer;
		timer << (int(pPlayer->GetBoomBoxCoolDown()) / 60 > 0 ? int(pPlayer->GetBoomBoxCoolDown()) / 60 : 0) << ":" << (int(pPlayer->GetBoomBoxCoolDown()) % 60 < 10 ? "0" : "") << int(pPlayer->GetBoomBoxCoolDown()) % 60;
		std::wstring time(timer.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, time.c_str(), XMFLOAT2(float(destRectFill.left) + 220.0f, float(destRectFill.top) + 55.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
	}

	if (pPlayer->GetFlashCoolDown() > 0.0f)
	{
		std::wstringstream timer;
		timer << (int(pPlayer->GetFlashCoolDown()) / 60 > 0 ? int(pPlayer->GetFlashCoolDown()) / 60 : 0) << ":" << (int(pPlayer->GetFlashCoolDown()) % 60 < 10 ? "0" : "") << int(pPlayer->GetFlashCoolDown()) % 60;
		std::wstring time(timer.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, time.c_str(), XMFLOAT2(float(destRectFill.left) + 400.0f, float(destRectFill.top) + 240.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
	}


	if (pPlayer->GetPlayer1())
		m_fP1RecipeRot = m_fUpgradeRot;
	else
		m_fP2RecipeRot = m_fUpgradeRot;
}

void CGameplayState::RenderWallHUD(CPlayer* pPlayer)
{
	CResourceManager * pResMan = pPlayer->GetResourceManager();

	float m_fUpgradeRot;

	if (pPlayer->GetPlayer1())
		m_fUpgradeRot = m_fP1RecipeRot;
	else
		m_fUpgradeRot = m_fP2RecipeRot;

	ID3D11ShaderResourceView * ShaderResource = nullptr;

	RECT destRectFill;

	destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 512.0f);
	destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 0.0f);
	destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 0.0f);
	destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 512.0f);

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	ShaderResource = Renderer->GetTexture(RADIAL_DEFENSE_UI);
	m_pSpriteBatch->Draw(ShaderResource, destRectFill, nullptr, Colors::White, 0.0f,
		XMFLOAT2(256.0f, 256.0f/*Renderer->GetViewPort(EViewport::Top)->Width * 0.5f,
							   Renderer->GetViewPort(EViewport::Top)->Height * 0.5f*/));
	m_pSpriteBatch->End();

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	ShaderResource = Renderer->GetTexture(PIZZA_SELECTOR_UI);
	m_pSpriteBatch->Draw(ShaderResource, destRectFill, nullptr, Colors::White, m_fUpgradeRot, XMFLOAT2(256.0f, 256.0f/*Renderer->GetViewPort(EViewport::Top)->Width * 0.5f, Renderer->GetViewPort(EViewport::Top)->Height * 0.5f*/));

	m_pSpriteBatch->End();

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
	destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
	destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
	destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

	m_pSpriteBatch->End();

	if (pPlayer->GetWallSelected() < 3)
	{
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		RECT tinyRect;
		tinyRect.top = LONG(destRectFill.top + 320.0f);
		tinyRect.left = LONG(destRectFill.left + 175.0f);
		tinyRect.bottom = LONG(tinyRect.top + 40.0f);
		tinyRect.right = LONG(tinyRect.left + 40.0f);
		ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, tinyRect);

		m_pSpriteBatch->End();
	}

	switch (pPlayer->GetWallSelected())
	{
	case 0:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 3;

		std::wstringstream potato_stream;
		potato_stream << "Cost: " << pResMan->m_nPrankCost[ItemEnum::WALLSPIKES][pResMan->GetUpgradeNum(ItemEnum::WALLSPIKES)];
		std::wstring potato(potato_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"SPIKES", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		if (pPlayer->GetResourceManager()->GetPotatoCount() >= pResMan->m_nPrankCost[ItemEnum::WALLSPIKES][pResMan->GetUpgradeNum(ItemEnum::WALLSPIKES)])
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			int m_nRemainder = pResMan->m_nPrankCost[ItemEnum::WALLSPIKES][pResMan->GetUpgradeNum(ItemEnum::WALLSPIKES)] - pPlayer->GetResourceManager()->GetPotatoCount();
			std::wstringstream stream;
			stream << "Get " << m_nRemainder << " more ";
			std::wstring string(stream.str());

			RECT destRect;
			destRect.left = LONG(destRectFill.left + 160.0f);
			destRect.top = LONG(destRectFill.top + 285.0f);
			destRect.bottom = LONG(destRect.top + 30.0f);
			destRect.right = LONG(destRect.left + 195.0f);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(HEALTHBAR);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(123123.0f, 12313.0f, 123123.0f, 123123.0f)));

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			RECT Rect;
			Rect.top = LONG(destRectFill.top + 285.0f);
			Rect.left = LONG(destRectFill.left + 315.0f);
			Rect.bottom = LONG(Rect.top + 40.0f);
			Rect.right = LONG(Rect.left + 40.0f);
			ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
			m_pSpriteBatch->Draw(ShaderResource, Rect);

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 160.0f, float(destRectFill.top) + 280.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, m_fP1CraftCraftedTimer)));
			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}

		break;
	}
	case 1:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 4;

		std::wstringstream potato_stream;
		potato_stream << "Cost: " << pResMan->m_nPrankCost[ItemEnum::WALLMINE][pResMan->GetUpgradeNum(ItemEnum::WALLMINE)];
		std::wstring potato(potato_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"MINE", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		if (pPlayer->GetResourceManager()->GetPotatoCount() >= pResMan->m_nPrankCost[ItemEnum::WALLMINE][pResMan->GetUpgradeNum(ItemEnum::WALLMINE)])
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			int m_nRemainder = pResMan->m_nPrankCost[ItemEnum::WALLMINE][pResMan->GetUpgradeNum(ItemEnum::WALLMINE)] - pPlayer->GetResourceManager()->GetPotatoCount();
			std::wstringstream stream;
			stream << "Get " << m_nRemainder << " more ";
			std::wstring string(stream.str());

			RECT destRect;
			destRect.left = LONG(destRectFill.left + 160.0f);
			destRect.top = LONG(destRectFill.top + 285.0f);
			destRect.bottom = LONG(destRect.top + 30.0f);
			destRect.right = LONG(destRect.left + 195.0f);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(HEALTHBAR);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(123123.0f, 12313.0f, 123123.0f, 123123.0f)));

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			RECT Rect;
			Rect.top = LONG(destRectFill.top + 285.0f);
			Rect.left = LONG(destRectFill.left + 315.0f);
			Rect.bottom = LONG(Rect.top + 40.0f);
			Rect.right = LONG(Rect.left + 40.0f);
			ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
			m_pSpriteBatch->Draw(ShaderResource, Rect);

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 160.0f, float(destRectFill.top) + 280.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, m_fP1CraftCraftedTimer)));
			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}

		break;
	}
	case 2:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 1;

		std::wstringstream potato_stream;
		potato_stream << "Cost: " << pResMan->m_nPrankCost[ItemEnum::WALLREPAIR][pResMan->GetUpgradeNum(ItemEnum::WALLREPAIR)];
		std::wstring potato(potato_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"REPAIR", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		if (pPlayer->GetResourceManager()->GetPotatoCount() >= pResMan->m_nPrankCost[ItemEnum::WALLREPAIR][pResMan->GetUpgradeNum(ItemEnum::WALLREPAIR)])
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			int m_nRemainder = pResMan->m_nPrankCost[ItemEnum::WALLREPAIR][pResMan->GetUpgradeNum(ItemEnum::WALLREPAIR)] - pPlayer->GetResourceManager()->GetPotatoCount();
			std::wstringstream stream;
			stream << "Get " << m_nRemainder << " more ";
			std::wstring string(stream.str());

			RECT destRect;
			destRect.left = LONG(destRectFill.left + 160.0f);
			destRect.top = LONG(destRectFill.top + 285.0f);
			destRect.bottom = LONG(destRect.top + 30.0f);
			destRect.right = LONG(destRect.left + 195.0f);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(HEALTHBAR);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(123123.0f, 12313.0f, 123123.0f, 123123.0f)));

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			RECT Rect;
			Rect.top = LONG(destRectFill.top + 285.0f);
			Rect.left = LONG(destRectFill.left + 315.0f);
			Rect.bottom = LONG(Rect.top + 40.0f);
			Rect.right = LONG(Rect.left + 40.0f);
			ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
			m_pSpriteBatch->Draw(ShaderResource, Rect);

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 160.0f, float(destRectFill.top) + 280.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, m_fP1CraftCraftedTimer)));
			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}

		break;
	}

	case 3:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 2;

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"RETURN TO GAME", XMFLOAT2(float(destRectFill.left) + 125.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		break;
	}
	default:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 1;

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(FLASH_BANG_INFO_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 275.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
		break;
	}
	}

	if (pPlayer->GetPlayer1())
		m_fP1RecipeRot = m_fUpgradeRot;
	else
		m_fP2RecipeRot = m_fUpgradeRot;
}

void CGameplayState::RenderStatsHUD(CPlayer* pPlayer)
{
	ID3D11ShaderResourceView * ShaderResource = nullptr;

	float health_bar_width = 700.0f;
	float health_bar_height = 25.0f;

	float sprint_bar_width = 700.0f;
	float sprint_bar_height = 25.0f;

	float prettiness_offset = health_bar_height * 0.5f;

	float p_offset_w = (Renderer->GetViewPort(EViewport::Top)->Width * 0.5f) - (health_bar_width * 0.5f);

	if (pPlayer->GetPlayer1())
	{
		RECT destRectFill;
		float timer = float(pcPlayer1->GetFlashTimer());

		if (!gameOver)
		{
			//FLASHBANG STUFF
			if (timer > 0.0f)
			{
				/*destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height);
				destRectFill.top = LONG(0);
				destRectFill.left = LONG(0);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(FLASH_BANG_SCREEN_EFFECT);
				m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, timer)));

				m_pSpriteBatch->End();*/

				switch (pcPlayer2->GetResourceManager()->GetUpgradeNum(ItemEnum::FLASHBANG))
				{
				case 0:
					Renderer->GetPostProcessEffects()[EViewport::Top].push_back(EPostProcessEffects::ScreenDistortion1);

					break;
				case 1:
					Renderer->GetPostProcessEffects()[EViewport::Top].push_back(EPostProcessEffects::ScreenDistortion2);

					break;
				case 2:
					Renderer->GetPostProcessEffects()[EViewport::Top].push_back(EPostProcessEffects::ScreenDistortion3);

					break;
				}
			}
			else
			{
				if (Renderer->GetPostProcessEffects()[EViewport::Top].size() > 0)
					Renderer->GetPostProcessEffects()[EViewport::Top].pop_back();
			}
		}

		//DIRECTIONAL DAMAGE STUFF
		if (pcPlayer1->GetIveBeenHit() && m_fP1DirectionalHitTimer < 1.0f && !gameOver)
			DirectionalDamageDisplay(pcPlayer1, EViewport::Top, m_fP1DirectionalHitTimer);

		//HEALTH BAR STUFF
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		float p1_offset_h = Renderer->GetViewPort(EViewport::Top)->Height - sprint_bar_height - prettiness_offset;

		destRectFill.bottom = LONG(p1_offset_h);
		destRectFill.top = LONG(p1_offset_h - health_bar_height);
		destRectFill.left = LONG(p_offset_w);
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		ShaderResource = Renderer->GetTexture(HEALTH_CONTAINER);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(HEALTHBAR);
		float ratio = (float(pcPlayer1->GetHealth()) / float(pcPlayer1->GetMaxHealth()));
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		if (pcPlayer1->GetHealth() < pcPlayer1->GetMaxHealth())
			destRectFill.right = LONG((health_bar_width * ratio) + p_offset_w);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		//Health Debug Info
		/*std::wstringstream _stream;
		_stream << pcPlayer1->GetHealth();
		std::wstring poop(_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, poop.c_str(), XMFLOAT2(float(destRectFill.left) + 60.0f, float(destRectFill.top)), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		if (pcPlayer1->GetHealth() < (pcPlayer1->GetMaxHealth() * 0.35f))
		{
			//Blinking Health Bar
			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(HEALTH_BAR_DANGER_UI);
			float ratio = (float(pcPlayer1->GetHealth()) / float(pcPlayer1->GetMaxHealth()));
			destRectFill.right = LONG(p_offset_w + health_bar_width);

			if (pcPlayer1->GetHealth() < pcPlayer1->GetMaxHealth())
				destRectFill.right = LONG((health_bar_width * ratio) + p_offset_w);

			m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(0.5f, 0.0f, 0.0f, m_fBlinkyBar / 255.0f)));

			m_pSpriteBatch->End();

			//Screen Jelly Fade-in Timer
			m_fP1JustTookDamage -= 0.05f;

			if (m_fP1JustTookDamage <= 0.0f)
			{
				m_fP1JustTookDamage = 0.0f;
			}

			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
			destRect.top = 0;
			destRect.left = 0;
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);

			if (!pcPlayer1->GetWinner())
			{
				//Screen Jelly
				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(LOW_HEALTH_SCREEN_EFFECT);

				m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 1.0f - m_fP1JustTookDamage)));

				m_pSpriteBatch->End();
			}

			if (!gameOver)
			{
				//idfk
				if (pcPlayer1->GetHealth() < (pcPlayer1->GetMaxHealth() * 0.25f))
				{
					m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

					ShaderResource = Renderer->GetTexture(HEALTHBAR);

					m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 0.25f)));

					m_pSpriteBatch->End();

					if (pcPlayer1->GetHealth() < (pcPlayer1->GetMaxHealth() * 0.15f))
					{
						//Blinking Screen Redness
						m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

						ShaderResource = Renderer->GetTexture(HEALTHBAR);

						RECT destRect;
						destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
						destRect.top = 0;
						destRect.left = 0;
						destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);
						m_pSpriteBatch->Draw(ShaderResource, destRect, nullptr, XMLoadFloat4(&XMFLOAT4(0.9f, 0, 0, (m_fBlinkyBar / 255.0f) * 0.25f)));

						m_pSpriteBatch->End();
					}
				}
			}
		}
		else
		{
			//Screen Jelly Fade Out
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
			destRect.top = 0;
			destRect.left = 0;
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(LOW_HEALTH_SCREEN_EFFECT);

			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 1.0f - (m_fP1JustTookDamage += 0.05f))));

			m_pSpriteBatch->End();

			if (m_fP1JustTookDamage >= 1.0f)
				m_fP1JustTookDamage = 1.0f;
		}

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BAR_OUTLINE);
		destRectFill.right = LONG(p_offset_w + health_bar_width);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		/*m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"HEALTH", XMFLOAT2(925.0f, float(destRectFill.top) + 10.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		//SPRINT BAR STUFF
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		p1_offset_h = Renderer->GetViewPort(EViewport::Top)->Height - 100.0f;
		p_offset_w = (Renderer->GetViewPort(EViewport::Top)->Width * 0.5f) - (sprint_bar_width * 0.5f);

		destRectFill.top = LONG(p1_offset_h + 15.0f);
		destRectFill.bottom = LONG(destRectFill.top + sprint_bar_height);
		destRectFill.left = LONG(p_offset_w);
		destRectFill.right = LONG(p_offset_w + sprint_bar_width);

		ShaderResource = Renderer->GetTexture(HEALTH_CONTAINER);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(SPRINTBAR);
		ratio = (float(pcPlayer1->GetStamina()) / 100.0f);
		destRectFill.right = LONG(p_offset_w + sprint_bar_width);

		if (pcPlayer1->GetStamina() < 100)
			destRectFill.right = LONG((sprint_bar_width * ratio) + p_offset_w);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		if (pcPlayer1->GetStamina() < 100 * 0.35f)
		{
			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(HEALTH_BAR_DANGER_UI);

			m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(0.5f, 0.0f, 0.0f, m_fStaminaShouldntBlinkyBar / 255.0f)));

			m_pSpriteBatch->End();
		}

		if (pcPlayer1->GetIsSprintLocked())
		{
			RECT destRect;
			destRect.bottom = LONG(p1_offset_h + 15.0f + sprint_bar_height);
			destRect.top = LONG(p1_offset_h + 15.0f);
			destRect.left = LONG(p_offset_w + 10.0f);
			destRect.right = LONG(((sprint_bar_width * 0.3f) + p_offset_w) - 10.0f); //magic number has to be how long it's locked

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(SPRINT_LOCK_UI);

			m_pSpriteBatch->Draw(ShaderResource, destRect);

			m_pSpriteBatch->End();
		}

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BAR_OUTLINE);
		destRectFill.right = LONG(p_offset_w + health_bar_width);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		/*m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"SPRINT", XMFLOAT2(925.0f, float(destRectFill.top) - 5.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		//POTATO COUNTER
		destRectFill.top = LONG(p1_offset_h);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w - 250.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		DirectX::FXMVECTOR color = Colors::White;
		DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((destRectFill.left - (m_fP1PotatoBlamTimer)),
			(destRectFill.top - (m_fP1PotatoBlamTimer))));
		DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, color, 0.0f, origin, m_fP1PotatoBlamTimer);

		m_pSpriteBatch->End();

		//NUM COUNTER
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());
		ShaderResource = Renderer->GetTexture(COUNTER_NUM_SLOT_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);
		m_pSpriteBatch->End();

		std::wstringstream potato_stream;
		potato_stream << pcPlayer1->GetResourceManager()->GetPotatoCount();
		std::wstring potatoes(potato_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, potatoes.c_str(), XMFLOAT2(float(destRectFill.right) - 55.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		//BRAINS COUNTER
		destRectFill.top = LONG(p1_offset_h);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w - 125.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		DirectX::FXMVECTOR color2 = Colors::White;
		DirectX::FXMVECTOR pos2 = XMLoadFloat2(&XMFLOAT2((destRectFill.left - (m_fP1BrainsBlamTimer)),
			(destRectFill.top - (m_fP1BrainsBlamTimer))));
		DirectX::FXMVECTOR origin2 = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, pos2, nullptr, color2, 0.0f, origin2, m_fP1BrainsBlamTimer);

		m_pSpriteBatch->End();

		//NUM COUNTER
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());
		ShaderResource = Renderer->GetTexture(COUNTER_NUM_SLOT_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);
		m_pSpriteBatch->End();

		std::wstringstream brains_stream;
		brains_stream << pcPlayer1->GetExperiencePoints();
		std::wstring brains(brains_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, brains.c_str(), XMFLOAT2(float(destRectFill.right) - 60.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		//AMMO COUNTER
		destRectFill.top = LONG(p1_offset_h);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w + 725.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

		ShaderResource = Renderer->GetTexture(AMMO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		std::wstringstream ammo_stream;
		ammo_stream << pcPlayer1->GetResourceManager()->GetAmmo();
		std::wstring ammo(ammo_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, ammo.c_str(), XMFLOAT2(float(destRectFill.right) - 60.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		if (!gameOver)
		{
			//PRANK WARNING
			if (m_bPlayerOneBoomBox)
			{
				destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 150.0f);
				destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 250.0f);
				destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - 400.0f);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f + 400.0f);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(BOOMBOX_WARNING_UI);
				m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

				m_pSpriteBatch->End();

				std::wstringstream _stream;
				_stream << (int(pcPlayer1->GetNoiseMakerTimer()) / 60 > 0 ? int(pcPlayer1->GetNoiseMakerTimer()) / 60 : 0) << ":" << (int(pcPlayer1->GetNoiseMakerTimer()) % 60 < 10 ? "0" : "") << int(pcPlayer1->GetNoiseMakerTimer()) % 60;
				std::wstring s(_stream.str());

				m_pSpriteBatch->Begin();
				m_pFontCalibri->DrawString(m_pSpriteBatch, s.c_str(), XMFLOAT2(float(destRectFill.right) - 100.0f, float(destRectFill.top) + 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pSpriteBatch->End();
			};

			//RETICLE DISPLAY
			if (!pcPlayer1->IsReloading() && !pcPlayer1->GetSprinting())
			{
				destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f + 25.0f);
				destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 25.0f);
				destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - 25.0f);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f + 25.0f);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				XMFLOAT4 color = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);

				if (pcPlayer1->GetIsZoombieInLineOfSight())
					/*DirectX::FXMVECTOR */color = XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f);
				else
					/*DirectX::FXMVECTOR */color = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);

				DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - (25.0f * m_fP1BlamTimer)),
					(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - (25.0f * m_fP1BlamTimer))));
				DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

				ShaderResource = Renderer->GetTexture(RETICLE);
				m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, XMLoadFloat4(&color), 0.0f, origin, m_fP1BlamTimer * 0.1f);

				m_pSpriteBatch->End();
			}
		}
	}
	else
	{
		float p2_offset_h = Renderer->GetViewPort(EViewport::Top)->TopLeftY + sprint_bar_height;
		float p1_offset_h = Renderer->GetViewPort(EViewport::Top)->Height - (Renderer->GetViewPort(EViewport::Top)->Height - sprint_bar_height - prettiness_offset);

		float timer = float(pcPlayer2->GetFlashTimer());
		RECT destRectFill;

		if (!gameOver)
		{
			//FLASHBANG STUFF
			if (timer > 0.0f)
			{
				/*destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height);
				destRectFill.top = LONG(0);
				destRectFill.left = LONG(0);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(FLASH_BANG_SCREEN_EFFECT);
				m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, timer)));

				m_pSpriteBatch->End();*/

				switch (pcPlayer1->GetResourceManager()->GetUpgradeNum(ItemEnum::FLASHBANG))
				{
				case 0:
					Renderer->GetPostProcessEffects()[EViewport::Bottom].push_back(EPostProcessEffects::ScreenDistortion1);

					break;
				case 1:
					Renderer->GetPostProcessEffects()[EViewport::Bottom].push_back(EPostProcessEffects::ScreenDistortion2);

					break;
				case 2:
					Renderer->GetPostProcessEffects()[EViewport::Bottom].push_back(EPostProcessEffects::ScreenDistortion3);

					break;
				}
			}
			else
			{
				if (Renderer->GetPostProcessEffects()[EViewport::Bottom].size() > 0)
					Renderer->GetPostProcessEffects()[EViewport::Bottom].pop_back();
			}
		}

		//DIRECTIONAL DAMAGE STUFF
		if (pcPlayer2->GetIveBeenHit() && m_fP2DirectionalHitTimer < 1.0f && !gameOver)
			DirectionalDamageDisplay(pcPlayer2, EViewport::Top, m_fP2DirectionalHitTimer);

		//HEALTH BAR STUFF
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		destRectFill.bottom = LONG(p2_offset_h + p1_offset_h + health_bar_height);
		destRectFill.top = LONG(p2_offset_h + p1_offset_h);
		destRectFill.left = LONG(p_offset_w);
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		ShaderResource = Renderer->GetTexture(HEALTH_CONTAINER);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(HEALTHBAR);
		float ratio2 = (float(pcPlayer2->GetHealth()) / float(pcPlayer2->GetMaxHealth()));
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		if (pcPlayer2->GetHealth() < pcPlayer2->GetMaxHealth())
			destRectFill.right = LONG((health_bar_width * ratio2) + p_offset_w);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		if (pcPlayer2->GetHealth() < (pcPlayer2->GetMaxHealth() * 0.35f))
		{
			//Blinking Health Bar
			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(HEALTH_BAR_DANGER_UI);
			float ratio = (float(pcPlayer2->GetHealth()) / float(pcPlayer2->GetMaxHealth()));
			destRectFill.right = LONG(p_offset_w + health_bar_width);

			if (pcPlayer2->GetHealth() < pcPlayer2->GetMaxHealth())
				destRectFill.right = LONG((health_bar_width * ratio) + p_offset_w);

			m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(0.5f, 0.0f, 0.0f, m_fBlinkyBar / 255.0f)));

			m_pSpriteBatch->End();

			//Screen Jelly Fade-in Timer
			m_fP2JustTookDamage -= 0.05f;

			if (m_fP2JustTookDamage <= 0.0f)
			{
				m_fP2JustTookDamage = 0.0f;
			}

			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
			destRect.top = 0;
			destRect.left = 0;
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);

			if (!pcPlayer2->GetWinner())
			{
				//Screen Jelly
				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(LOW_HEALTH_SCREEN_EFFECT);

				m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 1.0f - m_fP2JustTookDamage)));

				m_pSpriteBatch->End();
			}

			if (!gameOver)
			{
				//idfk
				if (pcPlayer2->GetHealth() < (pcPlayer2->GetMaxHealth() * 0.25f))
				{
					m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

					ShaderResource = Renderer->GetTexture(HEALTHBAR);

					m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 0.25f)));

					m_pSpriteBatch->End();

					if (pcPlayer2->GetHealth() < (pcPlayer2->GetMaxHealth() * 0.15f))
					{
						//Blinking Screen Redness
						m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

						ShaderResource = Renderer->GetTexture(HEALTHBAR);

						RECT destRect;
						destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
						destRect.top = 0;
						destRect.left = 0;
						destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);
						m_pSpriteBatch->Draw(ShaderResource, destRect, nullptr, XMLoadFloat4(&XMFLOAT4(0.9f, 0, 0, (m_fBlinkyBar / 255.0f) * 0.25f)));

						m_pSpriteBatch->End();
					}
				}
			}
		}
		else
		{
			//Screen Jelly Fade Out
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
			destRect.top = 0;
			destRect.left = 0;
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(LOW_HEALTH_SCREEN_EFFECT);

			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 1.0f - (m_fP2JustTookDamage += 0.05f))));

			m_pSpriteBatch->End();

			if (m_fP2JustTookDamage >= 1.0f)
				m_fP2JustTookDamage = 1.0f;
		}

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BAR_OUTLINE);
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		/*m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"HEALTH", XMFLOAT2(925.0f, float(destRectFill.top) + 10.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		//SPRINT BAR STUFF

		sprint_bar_width = 700.0f;
		sprint_bar_height = 25.0f;

		destRectFill.bottom = LONG(p1_offset_h + 5.0f + sprint_bar_height);
		destRectFill.top = LONG(p1_offset_h + 5.0f);
		destRectFill.left = LONG(p_offset_w);
		destRectFill.right = LONG(p_offset_w + sprint_bar_width);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());
		ShaderResource = Renderer->GetTexture(HEALTH_CONTAINER);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(SPRINTBAR);
		float ratio = (float(pcPlayer2->GetStamina()) / 100.0f);
		destRectFill.right = LONG(p_offset_w + sprint_bar_width);

		if (pcPlayer2->GetStamina() < 100)
			destRectFill.right = LONG((sprint_bar_width * ratio) + p_offset_w);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		if (pcPlayer2->GetStamina() < 100 * 0.35f)
		{
			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(HEALTH_BAR_DANGER_UI);

			m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(0.5f, 0.0f, 0.0f, m_fStaminaShouldntBlinkyBar2 / 255.0f)));

			m_pSpriteBatch->End();
		}

		if (pcPlayer2->GetIsSprintLocked())
		{
			RECT destRect;
			destRect.bottom = LONG(p1_offset_h + 5.0f + sprint_bar_height);
			destRect.top = LONG(p1_offset_h + 5.0f);
			destRect.left = LONG(p_offset_w + 10.0f);
			destRect.right = LONG(((sprint_bar_width * 0.3f) + p_offset_w) - 10.0f); //magic number has to be how long it's locked

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(SPRINT_LOCK_UI);

			m_pSpriteBatch->Draw(ShaderResource, destRect);

			m_pSpriteBatch->End();
		}

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BAR_OUTLINE);
		destRectFill.right = LONG(p_offset_w + health_bar_width);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		/*m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"SPRINT", XMFLOAT2(925.0f, float(destRectFill.top) - 5.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		//POTATO COUNTER
		destRectFill.top = LONG(0.0f);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w - 250.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		DirectX::FXMVECTOR color = Colors::White;
		DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((destRectFill.left - (m_fP2PotatoBlamTimer)),
			(destRectFill.top - (m_fP2PotatoBlamTimer))));
		DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, color, 0.0f, origin, m_fP2PotatoBlamTimer);

		m_pSpriteBatch->End();

		//NUM COUNTER
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());
		ShaderResource = Renderer->GetTexture(COUNTER_NUM_SLOT_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);
		m_pSpriteBatch->End();

		std::wstringstream potato2_stream;
		potato2_stream << pcPlayer2->GetResourceManager()->GetPotatoCount();
		std::wstring potatoes2(potato2_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, potatoes2.c_str(), XMFLOAT2(float(destRectFill.right) - 55.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		//BRAINS COUNTER
		destRectFill.top = LONG(0.0f);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w - 125.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		DirectX::FXMVECTOR color2 = Colors::White;
		DirectX::FXMVECTOR pos2 = XMLoadFloat2(&XMFLOAT2((destRectFill.left - (m_fP2BrainsBlamTimer)),
			(destRectFill.top - (m_fP2BrainsBlamTimer))));
		DirectX::FXMVECTOR origin2 = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, pos2, nullptr, color2, 0.0f, origin2, m_fP2BrainsBlamTimer);

		m_pSpriteBatch->End();

		//NUM COUNTER
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());
		ShaderResource = Renderer->GetTexture(COUNTER_NUM_SLOT_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);
		m_pSpriteBatch->End();

		std::wstringstream brains2_stream;
		brains2_stream << pcPlayer2->GetExperiencePoints();
		std::wstring brains2(brains2_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, brains2.c_str(), XMFLOAT2(float(destRectFill.right) - 60.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		//AMMO COUNTER
		destRectFill.top = LONG(0.0f);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w + 725.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

		ShaderResource = Renderer->GetTexture(AMMO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		std::wstringstream ammo2_stream;
		ammo2_stream << pcPlayer2->GetResourceManager()->GetAmmo();
		std::wstring ammo2(ammo2_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, ammo2.c_str(), XMFLOAT2(float(destRectFill.right) - 60.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		if (!gameOver)
		{
			//PRANK WARNING
			if (m_bPlayerTwoBoomBox)
			{
				destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 65.0f);
				destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 165.0f);
				destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - 400.0f);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f + 400.0f);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(BOOMBOX_WARNING_UI);
				m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

				m_pSpriteBatch->End();

				std::wstringstream _stream;
				_stream << (int(pcPlayer2->GetNoiseMakerTimer()) / 60 > 0 ? int(pcPlayer2->GetNoiseMakerTimer()) / 60 : 0) << ":" << (int(pcPlayer2->GetNoiseMakerTimer()) % 60 < 10 ? "0" : "") << int(pcPlayer2->GetNoiseMakerTimer()) % 60;
				std::wstring s(_stream.str());

				m_pSpriteBatch->Begin();
				m_pFontCalibri->DrawString(m_pSpriteBatch, s.c_str(), XMFLOAT2(float(destRectFill.right) - 100.0f, float(destRectFill.top) + 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pSpriteBatch->End();
			}

			//RETICLE DISPLAY
			if (!pcPlayer2->IsReloading() && !pcPlayer2->GetSprinting())
			{
				destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f + 25.0f);
				destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 25.0f);
				destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - 25.0f);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f + 25.0f);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				XMFLOAT4 color = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);

				if (pcPlayer2->GetIsZoombieInLineOfSight())
					/*DirectX::FXMVECTOR */color = XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f);
				else
					/*DirectX::FXMVECTOR */color = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);

				DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - (25.0f * m_fP2BlamTimer)),
					(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - (25.0f * m_fP2BlamTimer))));
				DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

				ShaderResource = Renderer->GetTexture(RETICLE);
				m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, XMLoadFloat4(&color), 0.0f, origin, m_fP2BlamTimer * 0.1f);

				m_pSpriteBatch->End();
			}
		}
	}
}

void CGameplayState::RenderUpgradeHUD(CPlayer* pPlayer)
{
	float m_fUpgradeRot;

	if (pPlayer->GetPlayer1())
		m_fUpgradeRot = m_fP1RecipeRot;
	else
		m_fUpgradeRot = m_fP2RecipeRot;

	ID3D11ShaderResourceView * ShaderResource = nullptr;

	RECT destRectFill;
	destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 512.0f);
	destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 0.0f);
	destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 0.0f);
	destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 512.0f);

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	if (pPlayer->GetUpgradeUtility())
		ShaderResource = Renderer->GetTexture(RADIAL_UTILITY_UI);
	else if (pPlayer->GetUpgradeDefense())
		ShaderResource = Renderer->GetTexture(RADIAL_DEFENSE_UI);
	else if (pPlayer->GetUpgradeOffense())
		ShaderResource = Renderer->GetTexture(RADIAL_OFFENSE_UI);
	else
		ShaderResource = Renderer->GetTexture(RADIAL_UPGRADE_UI);

	m_pSpriteBatch->Draw(ShaderResource, destRectFill, nullptr, Colors::White, 0.0f,
		XMFLOAT2(256.0f, 256.0f/*Renderer->GetViewPort(EViewport::Top)->Width * 0.5f,
							   Renderer->GetViewPort(EViewport::Top)->Height * 0.5f*/));
	m_pSpriteBatch->End();

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	ShaderResource = Renderer->GetTexture(PIZZA_SELECTOR_UI);
	m_pSpriteBatch->Draw(ShaderResource, destRectFill, nullptr, Colors::White, m_fUpgradeRot, XMFLOAT2(256.0f, 256.0f/*Renderer->GetViewPort(EViewport::Top)->Width * 0.5f, Renderer->GetViewPort(EViewport::Top)->Height * 0.5f*/));

	m_pSpriteBatch->End();

	destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
	destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
	destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
	destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

	switch (pPlayer->GetUpgradeHud())
	{
	case 0:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 3;

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());


		if (pPlayer->GetUpgradeUtility())
		{
			std::wstringstream stream;
			stream << "Cost: " << pPlayer->GetResourceManager()->GetUpgradeCost(ItemEnum::MAX_POTATO);
			std::wstring string(stream.str());

			m_pFontCalibri->DrawString(m_pSpriteBatch, L"MAX POTATO", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

			switch (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::MAX_POTATO))
			{
			case 0:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"15 to 25", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"potatoes", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT tinyRect;
				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 1:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"25 to 35", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"potatoes", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 2:
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"maxed at", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"35 potatoes", XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT destRect;
				destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
				destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
				destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
				destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

				ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_LEFT);
				m_pSpriteBatch->Draw(ShaderResource, destRect);

				break;
			}
			default:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				break;
			}
		}
		else if (pPlayer->GetUpgradeDefense())
		{
			std::wstringstream stream;
			stream << "Cost: " << pPlayer->GetResourceManager()->GetUpgradeCost(ItemEnum::WALLSPIKES);
			std::wstring string(stream.str());

			m_pFontCalibri->DrawString(m_pSpriteBatch, L"SPIKE", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

			switch (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::WALLSPIKES))
			{
			case 0:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"25 to 35", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"dmg pts", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT tinyRect;
				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 1:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"35 to 50", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"dmg pts", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 2:
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"maxed 50", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"dmg pts", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT destRect;
				destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
				destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
				destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
				destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

				ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_LEFT);
				m_pSpriteBatch->Draw(ShaderResource, destRect);

				break;
			}
			default:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				break;
			}
		}
		else if (pPlayer->GetUpgradeOffense())
		{
			std::wstringstream stream;
			stream << "Cost: " << pPlayer->GetResourceManager()->GetUpgradeCost(ItemEnum::EMP);
			std::wstring string(stream.str());

			m_pFontCalibri->DrawString(m_pSpriteBatch, L"EMP", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

			switch (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::EMP))
			{
			case 0:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"3 to 4 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT tinyRect;
				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 1:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"4 to 5 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 2:
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"maxed 5 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT destRect;
				destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
				destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
				destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
				destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

				ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_LEFT);
				m_pSpriteBatch->Draw(ShaderResource, destRect);

				break;
			}
			default:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				break;
			}
		}
		else
		{
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"DEFENSE", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		}

		m_pSpriteBatch->End();

		break;
	}
	case 1:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 4;

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		if (pPlayer->GetUpgradeUtility())
		{
			std::wstringstream stream;
			stream << "Cost: " << pPlayer->GetResourceManager()->GetUpgradeCost(ItemEnum::RELOAD_SPEED);
			std::wstring string(stream.str());

			m_pFontCalibri->DrawString(m_pSpriteBatch, L"RELOAD SPEED", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

			switch (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::RELOAD_SPEED))
			{
			case 0:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"3 to 2 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT tinyRect;
				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 1:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"2 to 1 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 2:
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"maxed 1 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT destRect;
				destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
				destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
				destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
				destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

				ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_UP);
				m_pSpriteBatch->Draw(ShaderResource, destRect);

				break;
			}
			default:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				break;
			}
		}
		else if (pPlayer->GetUpgradeDefense())
		{
			std::wstringstream stream;
			stream << "Cost: " << pPlayer->GetResourceManager()->GetUpgradeCost(ItemEnum::WALLMINE);
			std::wstring string(stream.str());

			m_pFontCalibri->DrawString(m_pSpriteBatch, L"MINE", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

			switch (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::WALLMINE))
			{
			case 0:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"100 to 150 dmg", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT tinyRect;
				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 1:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"150 dmg to", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"insta kill", XMFLOAT2(float(destRectFill.left) + 200.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 2:
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"maxed instakill", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT destRect;
				destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
				destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
				destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
				destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

				ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_UP);
				m_pSpriteBatch->Draw(ShaderResource, destRect);

				break;
			}
			default:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				break;
			}
		}
		else if (pPlayer->GetUpgradeOffense())
		{
			std::wstringstream stream;
			stream << "Cost: " << pPlayer->GetResourceManager()->GetUpgradeCost(ItemEnum::BOOMBOX);
			std::wstring string(stream.str());

			m_pFontCalibri->DrawString(m_pSpriteBatch, L"BOOMBOX", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

			switch (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::BOOMBOX))
			{
			case 0:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"5 to 10 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT tinyRect;
				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 1:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"10 to 15 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 2:
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"maxed 15 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT destRect;
				destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
				destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
				destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
				destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

				ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_UP);
				m_pSpriteBatch->Draw(ShaderResource, destRect);

				break;
			}
			default:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				break;
			}
		}
		else
		{
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"UTILITY", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		}
		m_pSpriteBatch->End();

		break;
	}
	case 2:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 1;

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		if (pPlayer->GetUpgradeUtility())
		{
			std::wstringstream stream;
			stream << "Cost: " << pPlayer->GetResourceManager()->GetUpgradeCost(ItemEnum::MOVEMENT_SPEED);
			std::wstring string(stream.str());

			m_pFontCalibri->DrawString(m_pSpriteBatch, L"SPEED", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

			switch (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::MOVEMENT_SPEED))
			{
			case 0:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"walk and", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"sprint up", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT tinyRect;
				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 1:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"walk and", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"sprint up", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 2:
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"maxed", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"movement speed", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT destRect;
				destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
				destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
				destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
				destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

				ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_RIGHT);
				m_pSpriteBatch->Draw(ShaderResource, destRect);

				break;
			}
			default:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				break;
			}
		}
		else if (pPlayer->GetUpgradeDefense())
		{
			std::wstringstream stream;
			stream << "Cost: " << pPlayer->GetResourceManager()->GetUpgradeCost(ItemEnum::WALLREPAIR);
			std::wstring string(stream.str());

			m_pFontCalibri->DrawString(m_pSpriteBatch, L"REPAIR", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

			switch (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::WALLREPAIR))
			{
			case 0:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"50% to 75% hp", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT tinyRect;
				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 1:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"75% to 100% hp", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 2:
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"maxed 100% hp", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT destRect;
				destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
				destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
				destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
				destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

				ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_RIGHT);
				m_pSpriteBatch->Draw(ShaderResource, destRect);

				break;
			}
			default:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				break;
			}
		}
		else if (pPlayer->GetUpgradeOffense())
		{
			std::wstringstream stream;
			stream << "Cost: " << pPlayer->GetResourceManager()->GetUpgradeCost(ItemEnum::FLASHBANG);
			std::wstring string(stream.str());

			m_pFontCalibri->DrawString(m_pSpriteBatch, L"FLASH BANG", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

			switch (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::FLASHBANG))
			{
			case 0:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"5 to 8 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT tinyRect;
				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 1:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"8 to 11 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				tinyRect.top = LONG(destRectFill.top + 320.0f);
				tinyRect.left = LONG(destRectFill.left + 175.0f);
				tinyRect.bottom = LONG(tinyRect.top + 40.0f);
				tinyRect.right = LONG(tinyRect.left + 40.0f);
				ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
				m_pSpriteBatch->Draw(ShaderResource, tinyRect);

				break;
			case 2:
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"maxed 11 sec", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

				RECT destRect;
				destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
				destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
				destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
				destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

				ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_RIGHT);
				m_pSpriteBatch->Draw(ShaderResource, destRect);

				break;
			}
			default:
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				break;
			}
		}
		else
		{
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"OFFENSE", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		}

		m_pSpriteBatch->End();

		break;
	}

	case 3:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 2;

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"RETURN TO GAME", XMFLOAT2(float(destRectFill.left) + 125.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		break;
	}
	default:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 1;

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(FLASH_BANG_INFO_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 275.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
		break;
	}
	}

	m_pSpriteBatch->Begin();

	if (pPlayer->GetUpgradeDefense())
	{
		if (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::WALLMINE) == 2)
		{
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
			destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
			destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

			ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_UP);
			m_pSpriteBatch->Draw(ShaderResource, destRect);
		}

		if (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::WALLSPIKES) == 2)
		{
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
			destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
			destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

			ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_LEFT);
			m_pSpriteBatch->Draw(ShaderResource, destRect);
		}

		if (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::WALLREPAIR) == 2)
		{
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
			destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
			destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

			ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_RIGHT);
			m_pSpriteBatch->Draw(ShaderResource, destRect);
		}
	}
	else if (pPlayer->GetUpgradeOffense())
	{
		if (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::FLASHBANG) == 2)
		{
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
			destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
			destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

			ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_RIGHT);
			m_pSpriteBatch->Draw(ShaderResource, destRect);
		}

		if (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::EMP) == 2)
		{
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
			destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
			destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

			ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_LEFT);
			m_pSpriteBatch->Draw(ShaderResource, destRect);
		}

		if (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::BOOMBOX) == 2)
		{
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
			destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
			destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

			ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_UP);
			m_pSpriteBatch->Draw(ShaderResource, destRect);
		}
	}
	else if (pPlayer->GetUpgradeUtility())
	{
		if (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::MAX_POTATO) == 2)
		{
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
			destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
			destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

			ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_LEFT);
			m_pSpriteBatch->Draw(ShaderResource, destRect);
		}

		if (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::RELOAD_SPEED) == 2)
		{
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
			destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
			destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

			ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_UP);
			m_pSpriteBatch->Draw(ShaderResource, destRect);
		}

		if (pPlayer->GetResourceManager()->GetUpgradeNum(ItemEnum::MOVEMENT_SPEED) == 2)
		{
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
			destRect.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
			destRect.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

			ShaderResource = Renderer->GetTexture(UPGRADE_CHECKMARK_RIGHT);
			m_pSpriteBatch->Draw(ShaderResource, destRect);
		}
	}

	m_pSpriteBatch->End();

	if (pPlayer->GetPlayer1())
		m_fP1RecipeRot = m_fUpgradeRot;
	else
		m_fP2RecipeRot = m_fUpgradeRot;
}

void CGameplayState::RenderDeathInfo(CPlayer* pPlayer, float fSlideStuffTimer)
{
	if (m_bShowScores)
	{
		CScoreCard * score_card = pPlayer->GetScoreCard();

		score_card->DetermineFavoritePrank();
		score_card->DetermineUpgradeLevel(pPlayer);

		ID3D11ShaderResourceView * ShaderResource = nullptr;

		//BACKGROUND
		RECT destRec;
		destRec.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f + 200.0f);
		destRec.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 250.0f);
		destRec.left = LONG(fSlideStuffTimer - 0.0f);
		destRec.right = LONG(fSlideStuffTimer + 425.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(TRANSITION);
		m_pSpriteBatch->Draw(ShaderResource, destRec, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 0.75f >= (1.0f - m_fStatTransitionTimer) ?
			(1.0f - m_fStatTransitionTimer) : 0.75f)));

		m_pSpriteBatch->End();

		//Title
		RECT destRecText;

		destRecText.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 250.0f + 5.0f);
		destRecText.bottom = LONG(destRecText.top + 66.0f);
		destRecText.left = LONG(fSlideStuffTimer + 10.0f);
		destRecText.right = LONG(fSlideStuffTimer + 412.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(GAME_HIGHLIGHTS_TEXT);
		m_pSpriteBatch->Draw(ShaderResource, destRecText, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 0.75f >= (1.0f - m_fStatTransitionTimer) ?
			(1.0f - m_fStatTransitionTimer) : 0.75f)));

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		/*m_pFontCalibri->DrawString(m_pSpriteBatch, L"GAME HIGHLIGHTS:", XMFLOAT2(fSlideStuffTimer + 10.0f, float(destRec.top) + 5.0f),
			XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));*/

		if (fSlideStuffTimer <= (Renderer->GetViewPort(EViewport::Bottom)->Width * 0.75f) && score_card->m_fZombieTimer == 1920.0f)
			score_card->m_fZombieTimer -= 0.01f;

		//Total Zombies Killed
		std::wstringstream kill_stream;
		kill_stream << "Total Kills:      " << score_card->m_nZombieStack;
		std::wstring kill(kill_stream.str());

		m_pFontCalibri->DrawString(m_pSpriteBatch, kill.c_str(), XMFLOAT2(score_card->m_fZombieTimer, float(destRec.top) + 75.0f),
			score_card->m_nZombieStack < score_card->GetZombiesKilled() ? XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)) : XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

		if (score_card->m_fZombieTimer <= 1440.0f && score_card->m_fPotatoTimer == 1920.0f)
			score_card->m_fPotatoTimer -= 0.01f;

		//Total Potatoes Collected
		std::wstringstream potato_stream;
		potato_stream << "Total Potatoes:      " << score_card->m_nPotatoStack;
		std::wstring potato(potato_stream.str());

		m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(score_card->m_fPotatoTimer, float(destRec.top) + 100.0f),
			score_card->m_nPotatoStack < score_card->GetPotatoesCollected() ? XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)) : XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

		if (score_card->m_fPotatoTimer <= 1440.0f && score_card->m_fLaunchedTimer == 1920.0f)
			score_card->m_fLaunchedTimer -= 0.01f;

		//Total Pranks Launched
		std::wstringstream prank_stream;
		prank_stream << "Pranks Launched:      " << score_card->m_nLaunchedStack;
		std::wstring prank(prank_stream.str());

		m_pFontCalibri->DrawString(m_pSpriteBatch, prank.c_str(), XMFLOAT2(score_card->m_fLaunchedTimer, float(destRec.top) + 125.0f),
			score_card->m_nLaunchedStack < (score_card->GetPranksLaunched(0) + score_card->GetPranksLaunched(1) + score_card->GetPranksLaunched(2))
			? XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)) : XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

		if (score_card->m_fLaunchedTimer <= 1440.0f && score_card->m_fFavoriteTimer == 1920.0f)
			score_card->m_fFavoriteTimer -= 0.01f;

		//Most Launched Prank
		std::wstringstream favorite_stream;

		//O_FLASH, O_BOOMBOX, O_EMP,
		switch (score_card->GetFavoritePrank())
		{
		case 0:
			favorite_stream << "Favorite Prank:      " << "Flash Bang";
			break;
		case 1:
			favorite_stream << "Favorite Prank:      " << "Boombox";
			break;
		case 2:
			favorite_stream << "Favorite Prank:      " << "EMP";
			break;
		case 3:
			favorite_stream << "Favorite Prank:      " << "None.";
		default:
			break;
		}
		std::wstring favorite(favorite_stream.str());

		m_pFontCalibri->DrawString(m_pSpriteBatch, favorite.c_str(), XMFLOAT2(score_card->m_fFavoriteTimer, float(destRec.top) + 150.0f),
			XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

		if (score_card->m_fFavoriteTimer <= 1440.0f && score_card->m_fMaxedTimer == 1920.0f)
			score_card->m_fMaxedTimer -= 0.01f;

		//Maxed Upgrades
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"Maxed Upgrades:", XMFLOAT2(score_card->m_fMaxedTimer, float(destRec.top) + 175.0f),
			XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

		float top_val = float(destRec.top) + 175.0f;
		bool temp = false;

		for (int i = 0; i < 9; i++)
		{
			if (score_card->GetMaxedAtIndex(i))
			{
				m_pFontCalibri->DrawString(m_pSpriteBatch, score_card->m_sItemNames[i].c_str(), XMFLOAT2(score_card->m_fMaxedTimer + 50.0f, top_val += 25),
					XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

				temp = true;
			}
		}

		if (temp == false)
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"None. :(", XMFLOAT2(score_card->m_fMaxedTimer + 50.0f, top_val += 25),
			XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

		m_pSpriteBatch->End();
	}


	//End Game Directions and whatnot
	if (endTimer <= 0.0f)
	{
		m_pSpriteBatch->Begin();

		if (pPlayer->GetPlayer1())
		{
			if (GameForgeInput::GetInstance()->GetNumberOfControllers() > 1)
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"PRESS 'A' TO CONTINUE", XMFLOAT2(10.0f, 40.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.5f, 0.0f, 1.0f)));
			else
				m_pFontCalibri->DrawString(m_pSpriteBatch, L"PRESS ENTER TO CONTINUE", XMFLOAT2(10.0f, 40.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.5f, 0.0f, 1.0f)));
		}
		else
			m_pFontCalibri->DrawString(m_pSpriteBatch, L"PRESS 'A' TO CONTINUE", XMFLOAT2(10.0f, 40.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.5f, 0.0f, 1.0f)));

		m_pSpriteBatch->End();
	}
	else
	{
		std::wstringstream stream;
		stream << "YOU CAN EXIT IN " << int(endTimer) + 1 << " SECONDS";
		std::wstring s(stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, s.c_str(), XMFLOAT2(10.0f, 40.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.5f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
	}


	//Fancy transition thing.
	ID3D11ShaderResourceView * ShaderResource = nullptr;

	RECT destRec;

	destRec.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height);
	destRec.top = LONG(0);
	destRec.left = LONG(0);
	destRec.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width);

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	ShaderResource = Renderer->GetTexture(TRANSITION);

	if (m_fEndTransitionTimer >= 0.5f)
	{
		m_pSpriteBatch->Draw(ShaderResource, destRec, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f >= (float(GAME_TRANSITION_END_TIMER) -
			float(m_fEndTransitionTimer)) * 2.0f ? (float(GAME_TRANSITION_END_TIMER) - float(m_fEndTransitionTimer)) * 2.0f : 1.0f)));
	}
	else if (m_fEndTransitionTimer < 0.5f)
		m_pSpriteBatch->Draw(ShaderResource, destRec, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 0.0f <= m_fEndTransitionTimer * 2.0f
		? m_fEndTransitionTimer * 2.0f : 0.0f)));

	if (m_fEndTransitionTimer <= 0.0f)
	{
		m_fStatTransitionTimer -= 0.005f;

		m_bShowScores = true;
	}

	m_pSpriteBatch->End();

}

void CGameplayState::RenderCutscene2D()
{
	if (!pcObjMan->GetCutsceneBOB())
	{
		//Brute
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ID3D11ShaderResourceView *  ShaderResource  = nullptr;
		ShaderResource = Renderer->GetTexture(BRUTE_CUTSCENE_TEXT_1);

		RECT rect_game;
		rect_game.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height + m_fCutsceneShakeTimer);
		rect_game.top = LONG(0 + m_fCutsceneShakeTimer);
		rect_game.left = LONG(0 + m_fCutsceneShakeTimer);
		rect_game.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width + m_fCutsceneShakeTimer);

		DirectX::FXMVECTOR color = Colors::White;
		DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((float(rect_game.left)), (float(rect_game.top))));
		DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, color, 0.0f, origin, m_fCutsceneSmackTimer);

		m_pSpriteBatch->End();

		int modifier = 0;

		if (m_fCutsceneShakeTimer)
			modifier = rand() & 10 - 1;

		if (modifier % 2)
			m_fCutsceneShakeTimer = float(modifier);
		else
			m_fCutsceneShakeTimer = float(-modifier);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BRUTE_CUTSCENE_TEXT_2);

		if(m_fCutsceneSlideTimer == 0)
			float amount = (m_fCutsceneSquishTimer += 1.0f);
		else
			float amount = 1;

		if(m_fCutsceneSquishTimer == 500.0f)
			m_fCutsceneSquishTimer = 500.0f;

		rect_game.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
		rect_game.top = LONG(-50 * m_fCutsceneSquishTimer);
		rect_game.left = LONG(-m_fCutsceneSlideTimer);
		rect_game.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width + m_fCutsceneSlideTimer);

		m_pSpriteBatch->Draw(ShaderResource, rect_game);

		m_pSpriteBatch->End();
	}
	else
	{
		//Bombie
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ID3D11ShaderResourceView *  ShaderResource = nullptr;
		ShaderResource = Renderer->GetTexture(BOMBIE_CUTSCENE_TEXT_1);

		RECT rect_game;
		rect_game.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height + m_fCutscene2ShakeTimer);
		rect_game.top = LONG(0 + m_fCutscene2ShakeTimer);
		rect_game.left = LONG(0 + m_fCutscene2ShakeTimer);
		rect_game.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width + m_fCutscene2ShakeTimer);

		DirectX::FXMVECTOR color = Colors::White;
		DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((float(rect_game.left)), (float(rect_game.top))));
		DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, color, 0.0f, origin, m_fCutscene2SmackTimer);

		m_pSpriteBatch->End();

		int modifier = 0;

		if (m_fCutscene2ShakeTimer)
			modifier = rand() % 10 - 1;

		if (modifier % 2)
			m_fCutscene2ShakeTimer = float(modifier);
		else
			m_fCutscene2ShakeTimer = float(-modifier);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BOMBIE_CUTSCENE_TEXT_2);

		if (m_fCutscene2SlideTimer == 0)
			float amount = (m_fCutscene2SquishTimer += 1.0f);
		else
			float amount = 1;

		if (m_fCutscene2SquishTimer == 500.0f)
			m_fCutscene2SquishTimer = 500.0f;

		rect_game.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
		rect_game.top = LONG(-50 /** m_fCutscene2SquishTimer*/);
		rect_game.left = LONG(-m_fCutscene2SlideTimer);
		rect_game.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width + m_fCutscene2SlideTimer);

		m_pSpriteBatch->Draw(ShaderResource, rect_game);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BOMBIE_CUTSCENE_TEXT_3);

		int modifier2 = 0;

		if (m_fCutscene2ShakeTimer)
			modifier2 = rand() % 3;

		RECT rect_game2;
		rect_game2.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
		rect_game2.top = LONG(-30 + modifier2);
		rect_game2.left = LONG(-30 + modifier2);
		rect_game2.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);

		DirectX::FXMVECTOR color2 = Colors::White;
		DirectX::FXMVECTOR pos2 = XMLoadFloat2(&XMFLOAT2((float(rect_game2.left)), (float(rect_game2.top))));
		DirectX::FXMVECTOR origin2 = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		m_pSpriteBatch->Draw(ShaderResource, pos2, nullptr, color2, 0.0f, origin2, m_fCutsceneDankTimer);

		m_pSpriteBatch->End();

		//

		//if (modifier2 % 2)
		//	band = (modifier2);
		//else
		//	band = (-modifier2);
	}
}

void CGameplayState::DirectionalDamageDisplay(CPlayer* pPlayer, EViewport ePort, float fTimer)
{
	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	RECT destRectFill;
	destRectFill.bottom = LONG((pcObjMan->Renderer->GetViewPort(ePort)->Height * 0.5f) + 125.0f);
	destRectFill.top = LONG((pcObjMan->Renderer->GetViewPort(ePort)->Height * 0.5f) - 125.0f);
	destRectFill.left = LONG((pcObjMan->Renderer->GetViewPort(ePort)->Width * 0.5f) - 125.0f);
	destRectFill.right = LONG((pcObjMan->Renderer->GetViewPort(ePort)->Width * 0.5f) + 125.0f);

	ID3D11ShaderResourceView * ShaderResource = nullptr;

	switch (pPlayer->GetHitDirection())
	{
	case eCardinal::BEHIND:
	{
		ShaderResource = pcObjMan->Renderer->GetTexture(DIR_DAMAGE_BACK_UI);
		break;
	}
	case eCardinal::FRONT:
	{
		ShaderResource = pcObjMan->Renderer->GetTexture(DIR_DAMAGE_FRONT_UI);
		break;
	}
	case eCardinal::LEFT:
	{
		ShaderResource = pcObjMan->Renderer->GetTexture(DIR_DAMAGE_LEFT_UI);
		break;
	}
	case eCardinal::RIGHT:
	{
		ShaderResource = pcObjMan->Renderer->GetTexture(DIR_DAMAGE_RIGHT_UI);
		break;
	}
	default:
	{
		ShaderResource = pcObjMan->Renderer->GetTexture(NO_TEXTURE);
		break;
	}
	}

	m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f * fTimer)));

	m_pSpriteBatch->End();
}

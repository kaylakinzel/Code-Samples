//Below code is some of the logic and drawing for all 2D elements during main gameplay.


void CGameplayState::RenderLauncherHUD(CPlayer* pPlayer)
{
	CResourceManager * pResMan = pPlayer->GetResourceManager();

	float m_fUpgradeRot;

	if (pPlayer->GetPlayer1())
		m_fUpgradeRot = m_fP1RecipeRot;
	else
		m_fUpgradeRot = m_fP2RecipeRot;

	ID3D11ShaderResourceView * ShaderResource = nullptr;

	RECT destRectFill;
	destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 512.0f);
	destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 0.0f);
	destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 0.0f);
	destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 512.0f);

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	ShaderResource = Renderer->GetTexture(RADIAL_OFFENSE_UI);
	m_pSpriteBatch->Draw(ShaderResource, destRectFill, nullptr, Colors::White, 0.0f,
		XMFLOAT2(256.0f, 256.0f/*Renderer->GetViewPort(EViewport::Top)->Width * 0.5f,
							   Renderer->GetViewPort(EViewport::Top)->Height * 0.5f*/));
	m_pSpriteBatch->End();

	m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

	ShaderResource = Renderer->GetTexture(PIZZA_SELECTOR_UI);
	m_pSpriteBatch->Draw(ShaderResource, destRectFill, nullptr, Colors::White, m_fUpgradeRot, XMFLOAT2(256.0f, 256.0f/*Renderer->GetViewPort(EViewport::Top)->Width * 0.5f, Renderer->GetViewPort(EViewport::Top)->Height * 0.5f*/));

	m_pSpriteBatch->End();

	destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f + 256.0f);
	destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Top)->Height * 0.5f - 256.0f);
	destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f - 256.0f);
	destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Top)->Width * 0.5f + 256.0f);

	if (pPlayer->GetHudItem() < 3)
	{
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		RECT tinyRect;
		tinyRect.top = LONG(destRectFill.top + 320.0f);
		tinyRect.left = LONG(destRectFill.left + 175.0f);
		tinyRect.bottom = LONG(tinyRect.top + 40.0f);
		tinyRect.right = LONG(tinyRect.left + 40.0f);
		ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, tinyRect);

		m_pSpriteBatch->End();
	}

	switch (pPlayer->GetHudItem())
	{
	case 0:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 3;

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"EMP", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"Turns lights", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"off leaving", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"only flashlight", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 250.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		std::wstringstream potato_stream;
		potato_stream << "Cost: " << pResMan->m_nPrankCost[ItemEnum::EMP][pResMan->GetUpgradeNum(ItemEnum::EMP)];
		std::wstring potato(potato_stream.str());

		if (pPlayer->GetResourceManager()->GetPotatoCount() >= pResMan->m_nPrankCost[ItemEnum::EMP][pResMan->GetUpgradeNum(ItemEnum::EMP)])
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			int m_nRemainder = pResMan->m_nPrankCost[ItemEnum::EMP][pResMan->GetUpgradeNum(ItemEnum::EMP)] - pPlayer->GetResourceManager()->GetPotatoCount();
			std::wstringstream stream;
			stream << "Get " << m_nRemainder << " more ";
			std::wstring string(stream.str());

			RECT destRect;
			destRect.left = LONG(destRectFill.left + 160.0f);
			destRect.top = LONG(destRectFill.top + 285.0f);
			destRect.bottom = LONG(destRect.top + 30.0f);
			destRect.right = LONG(destRect.left + 195.0f);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(HEALTHBAR);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(123123.0f, 12313.0f, 123123.0f, 123123.0f)));

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			RECT Rect;
			Rect.top = LONG(destRectFill.top + 285.0f);
			Rect.left = LONG(destRectFill.left + 315.0f);
			Rect.bottom = LONG(Rect.top + 40.0f);
			Rect.right = LONG(Rect.left + 40.0f);
			ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
			m_pSpriteBatch->Draw(ShaderResource, Rect);

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 160.0f, float(destRectFill.top) + 280.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, m_fP1CraftCraftedTimer)));
			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}

		break;
	}
	case 1:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 4;

		std::wstringstream potato_stream;
		potato_stream << "Cost: " << pResMan->m_nPrankCost[ItemEnum::BOOMBOX][pResMan->GetUpgradeNum(ItemEnum::BOOMBOX)];
		std::wstring potato(potato_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"BOOMBOX", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"Spawn boombox", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"that sends", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"zombies", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 250.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));

		m_pSpriteBatch->End();

		if (pPlayer->GetResourceManager()->GetPotatoCount() >= pResMan->m_nPrankCost[ItemEnum::BOOMBOX][pResMan->GetUpgradeNum(ItemEnum::BOOMBOX)])
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			int m_nRemainder = pResMan->m_nPrankCost[ItemEnum::BOOMBOX][pResMan->GetUpgradeNum(ItemEnum::BOOMBOX)] - pPlayer->GetResourceManager()->GetPotatoCount();
			std::wstringstream stream;
			stream << "Get " << m_nRemainder << " more ";
			std::wstring string(stream.str());

			RECT destRect;
			destRect.left = LONG(destRectFill.left + 160.0f);
			destRect.top = LONG(destRectFill.top + 285.0f);
			destRect.bottom = LONG(destRect.top + 30.0f);
			destRect.right = LONG(destRect.left + 195.0f);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(HEALTHBAR);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(123123.0f, 12313.0f, 123123.0f, 123123.0f)));

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			RECT Rect;
			Rect.top = LONG(destRectFill.top + 285.0f);
			Rect.left = LONG(destRectFill.left + 325.0f);
			Rect.bottom = LONG(Rect.top + 40.0f);
			Rect.right = LONG(Rect.left + 40.0f);
			ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
			m_pSpriteBatch->Draw(ShaderResource, Rect);

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 155.0f, float(destRectFill.top) + 280.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, m_fP1CraftCraftedTimer)));
			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}

		break;
	}
	case 2:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 1;

		std::wstringstream potato_stream;
		potato_stream << "Cost: " << pResMan->m_nPrankCost[ItemEnum::FLASHBANG][pResMan->GetUpgradeNum(ItemEnum::FLASHBANG)];
		std::wstring potato(potato_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"FLASH BANG", XMFLOAT2(float(destRectFill.left) + 175.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"Inverts controls", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 200.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"and flashes", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 225.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"screen whtie", XMFLOAT2(float(destRectFill.left) + 150.0f, float(destRectFill.top) + 250.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		if (pPlayer->GetResourceManager()->GetPotatoCount() >= pResMan->m_nPrankCost[ItemEnum::FLASHBANG][pResMan->GetUpgradeNum(ItemEnum::FLASHBANG)])
		{
			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}
		else
		{
			int m_nRemainder = pResMan->m_nPrankCost[ItemEnum::FLASHBANG][pResMan->GetUpgradeNum(ItemEnum::FLASHBANG)] - pPlayer->GetResourceManager()->GetPotatoCount();
			std::wstringstream stream;
			stream << "Get " << m_nRemainder << " more ";
			std::wstring string(stream.str());

			RECT destRect;
			destRect.left = LONG(destRectFill.left + 160.0f);
			destRect.top = LONG(destRectFill.top + 285.0f);
			destRect.bottom = LONG(destRect.top + 30.0f);
			destRect.right = LONG(destRect.left + 195.0f);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(HEALTHBAR);
			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(123123.0f, 12313.0f, 123123.0f, 123123.0f)));

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			RECT Rect;
			Rect.top = LONG(destRectFill.top + 285.0f);
			Rect.left = LONG(destRectFill.left + 315.0f);
			Rect.bottom = LONG(Rect.top + 40.0f);
			Rect.right = LONG(Rect.left + 40.0f);
			ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
			m_pSpriteBatch->Draw(ShaderResource, Rect);

			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, string.c_str(), XMFLOAT2(float(destRectFill.left) + 160.0f, float(destRectFill.top) + 280.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, m_fP1CraftCraftedTimer)));
			m_pSpriteBatch->End();

			m_pSpriteBatch->Begin();
			m_pFontCalibri->DrawString(m_pSpriteBatch, potato.c_str(), XMFLOAT2(float(destRectFill.left) + 205.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f)));
			m_pSpriteBatch->End();
		}

		break;
	}

	case 3:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 2;

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"RETURN TO GAME", XMFLOAT2(float(destRectFill.left) + 125.0f, float(destRectFill.top) + 175.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		break;
	}
	default:
	{
		m_fUpgradeRot = (3.14f * 0.5f) * 1;

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(FLASH_BANG_INFO_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"fishies", XMFLOAT2(float(destRectFill.left) + 275.0f, float(destRectFill.top) + 315.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
		break;
	}
	}

	if (pPlayer->GetEMPCoolDown() > 0.0f)
	{
		std::wstringstream timer;
		timer << (int(pPlayer->GetEMPCoolDown()) / 60 > 0 ? int(pPlayer->GetEMPCoolDown()) / 60 : 0) << ":" << (int(pPlayer->GetEMPCoolDown()) % 60 < 10 ? "0" : "") << int(pPlayer->GetEMPCoolDown()) % 60;
		std::wstring time(timer.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, time.c_str(), XMFLOAT2(float(destRectFill.left) + 35.0f, float(destRectFill.top) + 240.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
	}

	if (pPlayer->GetBoomBoxCoolDown() > 0.0f)
	{
		std::wstringstream timer;
		timer << (int(pPlayer->GetBoomBoxCoolDown()) / 60 > 0 ? int(pPlayer->GetBoomBoxCoolDown()) / 60 : 0) << ":" << (int(pPlayer->GetBoomBoxCoolDown()) % 60 < 10 ? "0" : "") << int(pPlayer->GetBoomBoxCoolDown()) % 60;
		std::wstring time(timer.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, time.c_str(), XMFLOAT2(float(destRectFill.left) + 220.0f, float(destRectFill.top) + 55.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
	}

	if (pPlayer->GetFlashCoolDown() > 0.0f)
	{
		std::wstringstream timer;
		timer << (int(pPlayer->GetFlashCoolDown()) / 60 > 0 ? int(pPlayer->GetFlashCoolDown()) / 60 : 0) << ":" << (int(pPlayer->GetFlashCoolDown()) % 60 < 10 ? "0" : "") << int(pPlayer->GetFlashCoolDown()) % 60;
		std::wstring time(timer.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, time.c_str(), XMFLOAT2(float(destRectFill.left) + 400.0f, float(destRectFill.top) + 240.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();
	}


	if (pPlayer->GetPlayer1())
		m_fP1RecipeRot = m_fUpgradeRot;
	else
		m_fP2RecipeRot = m_fUpgradeRot;
}

void CGameplayState::RenderStatsHUD(CPlayer* pPlayer)
{
	ID3D11ShaderResourceView * ShaderResource = nullptr;

	float health_bar_width = 700.0f;
	float health_bar_height = 25.0f;

	float sprint_bar_width = 700.0f;
	float sprint_bar_height = 25.0f;

	float prettiness_offset = health_bar_height * 0.5f;

	float p_offset_w = (Renderer->GetViewPort(EViewport::Top)->Width * 0.5f) - (health_bar_width * 0.5f);

	if (pPlayer->GetPlayer1())
	{
		RECT destRectFill;
		float timer = float(pcPlayer1->GetFlashTimer());

		if (!gameOver)
		{
			//FLASHBANG STUFF
			if (timer > 0.0f)
			{
				/*destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height);
				destRectFill.top = LONG(0);
				destRectFill.left = LONG(0);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(FLASH_BANG_SCREEN_EFFECT);
				m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, timer)));

				m_pSpriteBatch->End();*/

				switch (pcPlayer2->GetResourceManager()->GetUpgradeNum(ItemEnum::FLASHBANG))
				{
				case 0:
					Renderer->GetPostProcessEffects()[EViewport::Top].push_back(EPostProcessEffects::ScreenDistortion1);

					break;
				case 1:
					Renderer->GetPostProcessEffects()[EViewport::Top].push_back(EPostProcessEffects::ScreenDistortion2);

					break;
				case 2:
					Renderer->GetPostProcessEffects()[EViewport::Top].push_back(EPostProcessEffects::ScreenDistortion3);

					break;
				}
			}
			else
			{
				if (Renderer->GetPostProcessEffects()[EViewport::Top].size() > 0)
					Renderer->GetPostProcessEffects()[EViewport::Top].pop_back();
			}
		}

		//DIRECTIONAL DAMAGE STUFF
		if (pcPlayer1->GetIveBeenHit() && m_fP1DirectionalHitTimer < 1.0f && !gameOver)
			DirectionalDamageDisplay(pcPlayer1, EViewport::Top, m_fP1DirectionalHitTimer);

		//HEALTH BAR STUFF
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		float p1_offset_h = Renderer->GetViewPort(EViewport::Top)->Height - sprint_bar_height - prettiness_offset;

		destRectFill.bottom = LONG(p1_offset_h);
		destRectFill.top = LONG(p1_offset_h - health_bar_height);
		destRectFill.left = LONG(p_offset_w);
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		ShaderResource = Renderer->GetTexture(HEALTH_CONTAINER);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(HEALTHBAR);
		float ratio = (float(pcPlayer1->GetHealth()) / float(pcPlayer1->GetMaxHealth()));
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		if (pcPlayer1->GetHealth() < pcPlayer1->GetMaxHealth())
			destRectFill.right = LONG((health_bar_width * ratio) + p_offset_w);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		//Health Debug Info
		/*std::wstringstream _stream;
		_stream << pcPlayer1->GetHealth();
		std::wstring poop(_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, poop.c_str(), XMFLOAT2(float(destRectFill.left) + 60.0f, float(destRectFill.top)), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		if (pcPlayer1->GetHealth() < (pcPlayer1->GetMaxHealth() * 0.35f))
		{
			//Blinking Health Bar
			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(HEALTH_BAR_DANGER_UI);
			float ratio = (float(pcPlayer1->GetHealth()) / float(pcPlayer1->GetMaxHealth()));
			destRectFill.right = LONG(p_offset_w + health_bar_width);

			if (pcPlayer1->GetHealth() < pcPlayer1->GetMaxHealth())
				destRectFill.right = LONG((health_bar_width * ratio) + p_offset_w);

			m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(0.5f, 0.0f, 0.0f, m_fBlinkyBar / 255.0f)));

			m_pSpriteBatch->End();

			//Screen Jelly Fade-in Timer
			m_fP1JustTookDamage -= 0.05f;

			if (m_fP1JustTookDamage <= 0.0f)
			{
				m_fP1JustTookDamage = 0.0f;
			}

			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
			destRect.top = 0;
			destRect.left = 0;
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);

			if (!pcPlayer1->GetWinner())
			{
				//Screen Jelly
				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(LOW_HEALTH_SCREEN_EFFECT);

				m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 1.0f - m_fP1JustTookDamage)));

				m_pSpriteBatch->End();
			}

			if (!gameOver)
			{
				//idfk
				if (pcPlayer1->GetHealth() < (pcPlayer1->GetMaxHealth() * 0.25f))
				{
					m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

					ShaderResource = Renderer->GetTexture(HEALTHBAR);

					m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 0.25f)));

					m_pSpriteBatch->End();

					if (pcPlayer1->GetHealth() < (pcPlayer1->GetMaxHealth() * 0.15f))
					{
						//Blinking Screen Redness
						m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

						ShaderResource = Renderer->GetTexture(HEALTHBAR);

						RECT destRect;
						destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
						destRect.top = 0;
						destRect.left = 0;
						destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);
						m_pSpriteBatch->Draw(ShaderResource, destRect, nullptr, XMLoadFloat4(&XMFLOAT4(0.9f, 0, 0, (m_fBlinkyBar / 255.0f) * 0.25f)));

						m_pSpriteBatch->End();
					}
				}
			}
		}
		else
		{
			//Screen Jelly Fade Out
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
			destRect.top = 0;
			destRect.left = 0;
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(LOW_HEALTH_SCREEN_EFFECT);

			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 1.0f - (m_fP1JustTookDamage += 0.05f))));

			m_pSpriteBatch->End();

			if (m_fP1JustTookDamage >= 1.0f)
				m_fP1JustTookDamage = 1.0f;
		}

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BAR_OUTLINE);
		destRectFill.right = LONG(p_offset_w + health_bar_width);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		/*m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"HEALTH", XMFLOAT2(925.0f, float(destRectFill.top) + 10.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		//SPRINT BAR STUFF
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		p1_offset_h = Renderer->GetViewPort(EViewport::Top)->Height - 100.0f;
		p_offset_w = (Renderer->GetViewPort(EViewport::Top)->Width * 0.5f) - (sprint_bar_width * 0.5f);

		destRectFill.top = LONG(p1_offset_h + 15.0f);
		destRectFill.bottom = LONG(destRectFill.top + sprint_bar_height);
		destRectFill.left = LONG(p_offset_w);
		destRectFill.right = LONG(p_offset_w + sprint_bar_width);

		ShaderResource = Renderer->GetTexture(HEALTH_CONTAINER);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(SPRINTBAR);
		ratio = (float(pcPlayer1->GetStamina()) / 100.0f);
		destRectFill.right = LONG(p_offset_w + sprint_bar_width);

		if (pcPlayer1->GetStamina() < 100)
			destRectFill.right = LONG((sprint_bar_width * ratio) + p_offset_w);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		if (pcPlayer1->GetStamina() < 100 * 0.35f)
		{
			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(HEALTH_BAR_DANGER_UI);

			m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(0.5f, 0.0f, 0.0f, m_fStaminaShouldntBlinkyBar / 255.0f)));

			m_pSpriteBatch->End();
		}

		if (pcPlayer1->GetIsSprintLocked())
		{
			RECT destRect;
			destRect.bottom = LONG(p1_offset_h + 15.0f + sprint_bar_height);
			destRect.top = LONG(p1_offset_h + 15.0f);
			destRect.left = LONG(p_offset_w + 10.0f);
			destRect.right = LONG(((sprint_bar_width * 0.3f) + p_offset_w) - 10.0f); //magic number has to be how long it's locked

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(SPRINT_LOCK_UI);

			m_pSpriteBatch->Draw(ShaderResource, destRect);

			m_pSpriteBatch->End();
		}

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BAR_OUTLINE);
		destRectFill.right = LONG(p_offset_w + health_bar_width);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		/*m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"SPRINT", XMFLOAT2(925.0f, float(destRectFill.top) - 5.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		//POTATO COUNTER
		destRectFill.top = LONG(p1_offset_h);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w - 250.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		DirectX::FXMVECTOR color = Colors::White;
		DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((destRectFill.left - (m_fP1PotatoBlamTimer)),
			(destRectFill.top - (m_fP1PotatoBlamTimer))));
		DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, color, 0.0f, origin, m_fP1PotatoBlamTimer);

		m_pSpriteBatch->End();

		//NUM COUNTER
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());
		ShaderResource = Renderer->GetTexture(COUNTER_NUM_SLOT_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);
		m_pSpriteBatch->End();

		std::wstringstream potato_stream;
		potato_stream << pcPlayer1->GetResourceManager()->GetPotatoCount();
		std::wstring potatoes(potato_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, potatoes.c_str(), XMFLOAT2(float(destRectFill.right) - 55.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		//BRAINS COUNTER
		destRectFill.top = LONG(p1_offset_h);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w - 125.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		DirectX::FXMVECTOR color2 = Colors::White;
		DirectX::FXMVECTOR pos2 = XMLoadFloat2(&XMFLOAT2((destRectFill.left - (m_fP1BrainsBlamTimer)),
			(destRectFill.top - (m_fP1BrainsBlamTimer))));
		DirectX::FXMVECTOR origin2 = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, pos2, nullptr, color2, 0.0f, origin2, m_fP1BrainsBlamTimer);

		m_pSpriteBatch->End();

		//NUM COUNTER
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());
		ShaderResource = Renderer->GetTexture(COUNTER_NUM_SLOT_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);
		m_pSpriteBatch->End();

		std::wstringstream brains_stream;
		brains_stream << pcPlayer1->GetExperiencePoints();
		std::wstring brains(brains_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, brains.c_str(), XMFLOAT2(float(destRectFill.right) - 60.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		//AMMO COUNTER
		destRectFill.top = LONG(p1_offset_h);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w + 725.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

		ShaderResource = Renderer->GetTexture(AMMO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		std::wstringstream ammo_stream;
		ammo_stream << pcPlayer1->GetResourceManager()->GetAmmo();
		std::wstring ammo(ammo_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, ammo.c_str(), XMFLOAT2(float(destRectFill.right) - 60.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		if (!gameOver)
		{
			//PRANK WARNING
			if (m_bPlayerOneBoomBox)
			{
				destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 150.0f);
				destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 250.0f);
				destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - 400.0f);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f + 400.0f);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(BOOMBOX_WARNING_UI);
				m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

				m_pSpriteBatch->End();

				std::wstringstream _stream;
				_stream << (int(pcPlayer1->GetNoiseMakerTimer()) / 60 > 0 ? int(pcPlayer1->GetNoiseMakerTimer()) / 60 : 0) << ":" << (int(pcPlayer1->GetNoiseMakerTimer()) % 60 < 10 ? "0" : "") << int(pcPlayer1->GetNoiseMakerTimer()) % 60;
				std::wstring s(_stream.str());

				m_pSpriteBatch->Begin();
				m_pFontCalibri->DrawString(m_pSpriteBatch, s.c_str(), XMFLOAT2(float(destRectFill.right) - 100.0f, float(destRectFill.top) + 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pSpriteBatch->End();
			};

			//RETICLE DISPLAY
			if (!pcPlayer1->IsReloading() && !pcPlayer1->GetSprinting())
			{
				destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f + 25.0f);
				destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 25.0f);
				destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - 25.0f);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f + 25.0f);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				XMFLOAT4 color = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);

				if (pcPlayer1->GetIsZoombieInLineOfSight())
					/*DirectX::FXMVECTOR */color = XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f);
				else
					/*DirectX::FXMVECTOR */color = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);

				DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - (25.0f * m_fP1BlamTimer)),
					(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - (25.0f * m_fP1BlamTimer))));
				DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

				ShaderResource = Renderer->GetTexture(RETICLE);
				m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, XMLoadFloat4(&color), 0.0f, origin, m_fP1BlamTimer * 0.1f);

				m_pSpriteBatch->End();
			}
		}
	}
	else
	{
		float p2_offset_h = Renderer->GetViewPort(EViewport::Top)->TopLeftY + sprint_bar_height;
		float p1_offset_h = Renderer->GetViewPort(EViewport::Top)->Height - (Renderer->GetViewPort(EViewport::Top)->Height - sprint_bar_height - prettiness_offset);

		float timer = float(pcPlayer2->GetFlashTimer());
		RECT destRectFill;

		if (!gameOver)
		{
			//FLASHBANG STUFF
			if (timer > 0.0f)
			{
				/*destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height);
				destRectFill.top = LONG(0);
				destRectFill.left = LONG(0);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(FLASH_BANG_SCREEN_EFFECT);
				m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, timer)));

				m_pSpriteBatch->End();*/

				switch (pcPlayer1->GetResourceManager()->GetUpgradeNum(ItemEnum::FLASHBANG))
				{
				case 0:
					Renderer->GetPostProcessEffects()[EViewport::Bottom].push_back(EPostProcessEffects::ScreenDistortion1);

					break;
				case 1:
					Renderer->GetPostProcessEffects()[EViewport::Bottom].push_back(EPostProcessEffects::ScreenDistortion2);

					break;
				case 2:
					Renderer->GetPostProcessEffects()[EViewport::Bottom].push_back(EPostProcessEffects::ScreenDistortion3);

					break;
				}
			}
			else
			{
				if (Renderer->GetPostProcessEffects()[EViewport::Bottom].size() > 0)
					Renderer->GetPostProcessEffects()[EViewport::Bottom].pop_back();
			}
		}

		//DIRECTIONAL DAMAGE STUFF
		if (pcPlayer2->GetIveBeenHit() && m_fP2DirectionalHitTimer < 1.0f && !gameOver)
			DirectionalDamageDisplay(pcPlayer2, EViewport::Top, m_fP2DirectionalHitTimer);

		//HEALTH BAR STUFF
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		destRectFill.bottom = LONG(p2_offset_h + p1_offset_h + health_bar_height);
		destRectFill.top = LONG(p2_offset_h + p1_offset_h);
		destRectFill.left = LONG(p_offset_w);
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		ShaderResource = Renderer->GetTexture(HEALTH_CONTAINER);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(HEALTHBAR);
		float ratio2 = (float(pcPlayer2->GetHealth()) / float(pcPlayer2->GetMaxHealth()));
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		if (pcPlayer2->GetHealth() < pcPlayer2->GetMaxHealth())
			destRectFill.right = LONG((health_bar_width * ratio2) + p_offset_w);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		if (pcPlayer2->GetHealth() < (pcPlayer2->GetMaxHealth() * 0.35f))
		{
			//Blinking Health Bar
			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(HEALTH_BAR_DANGER_UI);
			float ratio = (float(pcPlayer2->GetHealth()) / float(pcPlayer2->GetMaxHealth()));
			destRectFill.right = LONG(p_offset_w + health_bar_width);

			if (pcPlayer2->GetHealth() < pcPlayer2->GetMaxHealth())
				destRectFill.right = LONG((health_bar_width * ratio) + p_offset_w);

			m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(0.5f, 0.0f, 0.0f, m_fBlinkyBar / 255.0f)));

			m_pSpriteBatch->End();

			//Screen Jelly Fade-in Timer
			m_fP2JustTookDamage -= 0.05f;

			if (m_fP2JustTookDamage <= 0.0f)
			{
				m_fP2JustTookDamage = 0.0f;
			}

			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
			destRect.top = 0;
			destRect.left = 0;
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);

			if (!pcPlayer2->GetWinner())
			{
				//Screen Jelly
				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(LOW_HEALTH_SCREEN_EFFECT);

				m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 1.0f - m_fP2JustTookDamage)));

				m_pSpriteBatch->End();
			}

			if (!gameOver)
			{
				//idfk
				if (pcPlayer2->GetHealth() < (pcPlayer2->GetMaxHealth() * 0.25f))
				{
					m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

					ShaderResource = Renderer->GetTexture(HEALTHBAR);

					m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 0.25f)));

					m_pSpriteBatch->End();

					if (pcPlayer2->GetHealth() < (pcPlayer2->GetMaxHealth() * 0.15f))
					{
						//Blinking Screen Redness
						m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

						ShaderResource = Renderer->GetTexture(HEALTHBAR);

						RECT destRect;
						destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
						destRect.top = 0;
						destRect.left = 0;
						destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);
						m_pSpriteBatch->Draw(ShaderResource, destRect, nullptr, XMLoadFloat4(&XMFLOAT4(0.9f, 0, 0, (m_fBlinkyBar / 255.0f) * 0.25f)));

						m_pSpriteBatch->End();
					}
				}
			}
		}
		else
		{
			//Screen Jelly Fade Out
			RECT destRect;
			destRect.bottom = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Height);
			destRect.top = 0;
			destRect.left = 0;
			destRect.right = LONG(Renderer->GetViewPort(EViewport::Fullscreen)->Width);

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

			ShaderResource = Renderer->GetTexture(LOW_HEALTH_SCREEN_EFFECT);

			m_pSpriteBatch->Draw(ShaderResource, destRect, XMLoadFloat4(&XMFLOAT4(1.0f, 0, 0, 1.0f - (m_fP2JustTookDamage += 0.05f))));

			m_pSpriteBatch->End();

			if (m_fP2JustTookDamage >= 1.0f)
				m_fP2JustTookDamage = 1.0f;
		}

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BAR_OUTLINE);
		destRectFill.right = LONG(p_offset_w + health_bar_width);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		/*m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"HEALTH", XMFLOAT2(925.0f, float(destRectFill.top) + 10.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		//SPRINT BAR STUFF

		sprint_bar_width = 700.0f;
		sprint_bar_height = 25.0f;

		destRectFill.bottom = LONG(p1_offset_h + 5.0f + sprint_bar_height);
		destRectFill.top = LONG(p1_offset_h + 5.0f);
		destRectFill.left = LONG(p_offset_w);
		destRectFill.right = LONG(p_offset_w + sprint_bar_width);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());
		ShaderResource = Renderer->GetTexture(HEALTH_CONTAINER);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(SPRINTBAR);
		float ratio = (float(pcPlayer2->GetStamina()) / 100.0f);
		destRectFill.right = LONG(p_offset_w + sprint_bar_width);

		if (pcPlayer2->GetStamina() < 100)
			destRectFill.right = LONG((sprint_bar_width * ratio) + p_offset_w);

		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		if (pcPlayer2->GetStamina() < 100 * 0.35f)
		{
			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(HEALTH_BAR_DANGER_UI);

			m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(0.5f, 0.0f, 0.0f, m_fStaminaShouldntBlinkyBar2 / 255.0f)));

			m_pSpriteBatch->End();
		}

		if (pcPlayer2->GetIsSprintLocked())
		{
			RECT destRect;
			destRect.bottom = LONG(p1_offset_h + 5.0f + sprint_bar_height);
			destRect.top = LONG(p1_offset_h + 5.0f);
			destRect.left = LONG(p_offset_w + 10.0f);
			destRect.right = LONG(((sprint_bar_width * 0.3f) + p_offset_w) - 10.0f); //magic number has to be how long it's locked

			m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

			ShaderResource = Renderer->GetTexture(SPRINT_LOCK_UI);

			m_pSpriteBatch->Draw(ShaderResource, destRect);

			m_pSpriteBatch->End();
		}

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		ShaderResource = Renderer->GetTexture(BAR_OUTLINE);
		destRectFill.right = LONG(p_offset_w + health_bar_width);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		/*m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, L"SPRINT", XMFLOAT2(925.0f, float(destRectFill.top) - 5.0f), XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));
		m_pSpriteBatch->End();*/

		//POTATO COUNTER
		destRectFill.top = LONG(0.0f);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w - 250.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		DirectX::FXMVECTOR color = Colors::White;
		DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((destRectFill.left - (m_fP2PotatoBlamTimer)),
			(destRectFill.top - (m_fP2PotatoBlamTimer))));
		DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		ShaderResource = Renderer->GetTexture(POTATO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, color, 0.0f, origin, m_fP2PotatoBlamTimer);

		m_pSpriteBatch->End();

		//NUM COUNTER
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());
		ShaderResource = Renderer->GetTexture(COUNTER_NUM_SLOT_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);
		m_pSpriteBatch->End();

		std::wstringstream potato2_stream;
		potato2_stream << pcPlayer2->GetResourceManager()->GetPotatoCount();
		std::wstring potatoes2(potato2_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, potatoes2.c_str(), XMFLOAT2(float(destRectFill.right) - 55.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		//BRAINS COUNTER
		destRectFill.top = LONG(0.0f);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w - 125.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

		DirectX::FXMVECTOR color2 = Colors::White;
		DirectX::FXMVECTOR pos2 = XMLoadFloat2(&XMFLOAT2((destRectFill.left - (m_fP2BrainsBlamTimer)),
			(destRectFill.top - (m_fP2BrainsBlamTimer))));
		DirectX::FXMVECTOR origin2 = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

		ShaderResource = Renderer->GetTexture(BRAINS_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, pos2, nullptr, color2, 0.0f, origin2, m_fP2BrainsBlamTimer);

		m_pSpriteBatch->End();

		//NUM COUNTER
		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());
		ShaderResource = Renderer->GetTexture(COUNTER_NUM_SLOT_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);
		m_pSpriteBatch->End();

		std::wstringstream brains2_stream;
		brains2_stream << pcPlayer2->GetExperiencePoints();
		std::wstring brains2(brains2_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, brains2.c_str(), XMFLOAT2(float(destRectFill.right) - 60.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		//AMMO COUNTER
		destRectFill.top = LONG(0.0f);
		destRectFill.bottom = LONG(destRectFill.top + 100.0f);
		destRectFill.left = LONG(p_offset_w + 725.0f);
		destRectFill.right = LONG(destRectFill.left + 100.0f);

		m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->AlphaBlend());

		ShaderResource = Renderer->GetTexture(AMMO_COUNTER_UI);
		m_pSpriteBatch->Draw(ShaderResource, destRectFill);

		m_pSpriteBatch->End();

		std::wstringstream ammo2_stream;
		ammo2_stream << pcPlayer2->GetResourceManager()->GetAmmo();
		std::wstring ammo2(ammo2_stream.str());

		m_pSpriteBatch->Begin();
		m_pFontCalibri->DrawString(m_pSpriteBatch, ammo2.c_str(), XMFLOAT2(float(destRectFill.right) - 60.0f, float(destRectFill.bottom) - 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
		m_pSpriteBatch->End();

		if (!gameOver)
		{
			//PRANK WARNING
			if (m_bPlayerTwoBoomBox)
			{
				destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 65.0f);
				destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 165.0f);
				destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - 400.0f);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f + 400.0f);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				ShaderResource = Renderer->GetTexture(BOOMBOX_WARNING_UI);
				m_pSpriteBatch->Draw(ShaderResource, destRectFill, XMLoadFloat4(&XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f)));

				m_pSpriteBatch->End();

				std::wstringstream _stream;
				_stream << (int(pcPlayer2->GetNoiseMakerTimer()) / 60 > 0 ? int(pcPlayer2->GetNoiseMakerTimer()) / 60 : 0) << ":" << (int(pcPlayer2->GetNoiseMakerTimer()) % 60 < 10 ? "0" : "") << int(pcPlayer2->GetNoiseMakerTimer()) % 60;
				std::wstring s(_stream.str());

				m_pSpriteBatch->Begin();
				m_pFontCalibri->DrawString(m_pSpriteBatch, s.c_str(), XMFLOAT2(float(destRectFill.right) - 100.0f, float(destRectFill.top) + 35.0f), XMLoadFloat4(&XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f)));
				m_pSpriteBatch->End();
			}

			//RETICLE DISPLAY
			if (!pcPlayer2->IsReloading() && !pcPlayer2->GetSprinting())
			{
				destRectFill.bottom = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f + 25.0f);
				destRectFill.top = LONG(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - 25.0f);
				destRectFill.left = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - 25.0f);
				destRectFill.right = LONG(Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f + 25.0f);

				m_pSpriteBatch->Begin(SpriteSortMode::SpriteSortMode_Texture, m_pStates->NonPremultiplied());

				XMFLOAT4 color = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);

				if (pcPlayer2->GetIsZoombieInLineOfSight())
					/*DirectX::FXMVECTOR */color = XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f);
				else
					/*DirectX::FXMVECTOR */color = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);

				DirectX::FXMVECTOR pos = XMLoadFloat2(&XMFLOAT2((Renderer->GetViewPort(EViewport::Bottom)->Width * 0.5f - (25.0f * m_fP2BlamTimer)),
					(Renderer->GetViewPort(EViewport::Bottom)->Height * 0.5f - (25.0f * m_fP2BlamTimer))));
				DirectX::FXMVECTOR origin = XMLoadFloat2(&XMFLOAT2(0.0f, 0.0f));

				ShaderResource = Renderer->GetTexture(RETICLE);
				m_pSpriteBatch->Draw(ShaderResource, pos, nullptr, XMLoadFloat4(&color), 0.0f, origin, m_fP2BlamTimer * 0.1f);

				m_pSpriteBatch->End();
			}
		}
	}
}



